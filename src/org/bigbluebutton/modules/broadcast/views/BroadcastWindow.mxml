<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<bcast:CustomMdiWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
					  xmlns:bcast="org.bigbluebutton.common.*" 
					  implements="org.bigbluebutton.common.IBbbModuleWindow" 
            styleNameFocus="broadcastStyleFocus" 
            styleNameNoFocus="broadcastStyleNoFocus"
            creationComplete="onCreationComplete()"
            visible="false"
					  xmlns:mate="http://mate.asfusion.com/" showCloseButton="false"
					  layout="absolute" title="Broadcast" resize="onResize()" resizeEndMDIWindow="onResize()">

	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.modules.broadcast.managers.BroadcastManager;
			import org.bigbluebutton.modules.broadcast.models.BroadcastOptions;
			import org.bigbluebutton.modules.broadcast.models.Stream;
			import org.bigbluebutton.modules.broadcast.models.Streams;			     
			public var broadcastManager:BroadcastManager;
			public var curStream:Stream;
					
			public var options:BroadcastOptions;
			private var createComplete:Boolean = false;
      
			[Bindable]
			public var streams:Streams;
			
      private var autoPlayTimer:Timer
      
			private function onCreationComplete():void {
        options = new BroadcastOptions();
        
        this.showControls = options.showWindowControls;
        
        streamsList.visible = options.showStreams
        if (! options.showStreams) {
          currentState = "doNotShowPlaylist";
        }
        
        createComplete = true;
        
        autoPlayTimer = new Timer(3000,1);
        autoPlayTimer.addEventListener(TimerEvent.TIMER, onTimerComplete);
        autoPlayTimer.start();
      }
			
      private function onTimerComplete(event:TimerEvent = null):void {
        if (options.autoPlay && visible) {
          // Don't start playing the video if the video is hidden.
          broadcastManager.playVideo(0);
        }        
      }
      
			public function becomePresenter():void {
        if (options.showStreams) {
          videoStreamList.visible = true;
        }
				
				if (curStream != null) {
					playBtn.selected = true;
					playBtn.label = "Stop";
					streamsComboBox.selectedIndex = streams.getStreamIndex(curStream.getStreamId());
				} else {
					playBtn.selected = false;
					playBtn.label = "Play";				
					streamsComboBox.selectedIndex = 0;
				}
			}
			
			public function becomeViewer():void{
        if (options.showStreams) {
          videoStreamList.visible = false;
        }
				
				if (curStream != null) {
					playBtn.selected = true;
					playBtn.label = "Stop";
					streamsComboBox.selectedIndex = streams.getStreamIndex(curStream.getStreamId());
				} else {
					playBtn.selected = false;
					playBtn.label = "Play";				
					streamsComboBox.selectedIndex = 0;
				}
			}
			
			private function playStopVideo():void {
				if (playBtn.selected) {
					broadcastManager.playVideo(streamsComboBox.selectedIndex);	
					playBtn.label = "Stop";
				} else {
					playBtn.label = "Play";
					stopVideo();
				}
			}
								
			private function stopVideo():void {
				broadcastManager.stopVideo();
			}
			
			public function getPrefferedPosition():String {	
				return options.position;
			}
            
      private function onResize():void {
        if (curStream != null && createComplete) {
          curStream.onResize();         
        }
      }
												
		]]>
	</mx:Script>
  
  <bcast:states>
    <mx:State name="doNotShowPlaylist">      
      <mx:SetProperty target="{streamsList}" name="height" value="1"/>
    </mx:State>
  </bcast:states>  
  
	<mx:HBox id="videoHolderBox" width="100%" height="100%" />		
  <mx:ControlBar id="streamsList" visible="false" width="100%" height="30" paddingTop="0" borderStyle="outset" horizontalAlign="center">
    <mx:HBox x="1" y="1" id="videoStreamList" visible="false" width="100%" height="100%" horizontalAlign="center">
      <mx:ComboBox id="streamsComboBox" width="85%" dataProvider="{streams.streamNames}" />
      <mx:Button id="playBtn" label="Play" width="15% " click="playStopVideo()" toggle="true"/>				
    </mx:HBox>
  </mx:ControlBar>
</bcast:CustomMdiWindow>
