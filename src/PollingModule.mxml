<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	implements="org.bigbluebutton.common.IBigBlueButtonModule" 
	xmlns:polling="org.bigbluebutton.modules.polling.*"
	xmlns:maps="org.bigbluebutton.modules.polling.maps.*"
	creationComplete="onCreationComplete()">
	  
    <maps:PollEventMap id="pollEventMap"/>
  
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBigBlueButtonModule;
			import org.bigbluebutton.modules.polling.events.ModuleEvent;		

			private static const LOGGER:ILogger = getClassLogger(PollingModule);

			private var _moduleName:String = "Polling";			
			private var _attributes:Object;
			
			public var globalDispatcher:Dispatcher = new Dispatcher();
			
			private function onCreationComplete():void {
				LOGGER.debug("module initialized");
			}
			
			public function get moduleName():String {
				return _moduleName;
			}
			
			public function get uri():String{
				if (_attributes.mode == "PLAYBACK")
					return _attributes.uri + "/" + _attributes.playbackRoom;
				return _attributes.uri + "/" + _attributes.room;
			}
			
			public function get username():String {
				return _attributes.username;
			}
						
			public function getRoom():String{
				return _attributes.room;
			}
			
			public function get userid():Number {
				return _attributes.userid as Number;
			}
			
			public function get role():String {
				return _attributes.userrole as String;
			}
			
			public function start(attributes:Object):void {	
				LOGGER.debug("PollingModule started [Username: {0} Role: {1} Room:{2}]", [attributes.username, attributes.userrole, attributes.room]);
				
				_attributes = attributes;
				//eventMap.module = this;
				LOGGER.debug("inside start() dispatching ModuleEvent");
				var startEvent:ModuleEvent = new ModuleEvent(ModuleEvent.START);
				startEvent.module = this;
				globalDispatcher.dispatchEvent(startEvent);
			}
			
			public function stop():void {
				LOGGER.debug("STOPPING Polling MODULE");
			}
			
			public function getMeetingInfo():String{
				return getMeetingInfo();
			}
			
		]]>
	</mx:Script>
	
	
	
</mx:Module>
