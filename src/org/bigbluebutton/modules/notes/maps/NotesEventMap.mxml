<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" 
          xmlns="http://mate.asfusion.com/">
	<mx:Script>
		<![CDATA[
      import mx.events.FlexEvent;      
      import org.bigbluebutton.modules.notes.events.NotesModuleStartEvent;
      import org.bigbluebutton.modules.notes.events.RetrieveNotesEvent;
      import org.bigbluebutton.modules.notes.events.RetrieveNotesSuccessEvent;
      import org.bigbluebutton.modules.notes.events.SaveErrorEvent;
      import org.bigbluebutton.modules.notes.events.SaveNoteEvent;
      import org.bigbluebutton.modules.notes.events.SaveSuccessEvent;
      import org.bigbluebutton.modules.notes.models.NotesModel;
      import org.bigbluebutton.modules.notes.services.NotesMessageService;
      import org.bigbluebutton.modules.notes.services.RetrieveNotesService;
      
		]]>
	</mx:Script>

  <EventHandlers type="{NotesModuleStartEvent.NOTES_MODULE_START}">    
    <ObjectBuilder generator="{NotesModel}" cache="global"/>
    <ObjectBuilder generator="{RetrieveNotesService}" cache="global" constructorArguments="{scope.dispatcher}"/>
    <ObjectBuilder generator="{NotesMessageService}" cache="global" constructorArguments="{scope.dispatcher}"/>
    <ObjectBuilder generator="{NotesEventMapDelegate}" cache="global" constructorArguments="{scope.dispatcher}"/>   
  </EventHandlers>

  <EventHandlers type="{RetrieveNotesEvent.RETRIEVE}">        
    <MethodInvoker generator="{RetrieveNotesService}" method="retrieveNotes"/>
  </EventHandlers>
  
  <EventHandlers type="{RetrieveNotesSuccessEvent.RETRIEVE_SUCCESS}">        
    <MethodInvoker generator="{NotesEventMapDelegate}" method="handleRetrieveNotesSuccessEvent" arguments="{event}"/>
  </EventHandlers>
  
  <EventHandlers type="{SaveNoteEvent.SAVE_NOTE}">        
    <MethodInvoker generator="{NotesMessageService}" method="save" arguments="{event.note}" />
  </EventHandlers>
  
  <EventHandlers type="{SaveSuccessEvent.NOTE_SAVE_SUCCESS}">        
    <MethodInvoker generator="{NotesMessageService}" method="saveSuccess" arguments="{event}" />
  </EventHandlers>	
  
  <EventHandlers type="{SaveErrorEvent.FAILED_TO_SAVE}">        
    <MethodInvoker generator="{NotesMessageService}" method="saveError" arguments="{event}" />
  </EventHandlers>	
  
  <Injectors target="{NotesEventMapDelegate}">
    <PropertyInjector targetKey="notesModel" source="{NotesModel}"/>
  </Injectors>
  
  <Injectors target="{NotesMessageService}">
    <PropertyInjector targetKey="notesModel" source="{NotesModel}"/>
  </Injectors>
</EventMap>