<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<CustomMdiWindow xmlns="org.bigbluebutton.common.*" 
	       xmlns:mx="http://www.adobe.com/2006/mxml" 
	       xmlns:chat="org.bigbluebutton.modules.chat.views.components.*"
	       showCloseButton="false"
	       implements="org.bigbluebutton.common.IBbbModuleWindow" 
	       creationComplete="onCreationComplete()"
	       xmlns:components="org.bigbluebutton.modules.chat.view.components.*" 
		   xmlns:mate="http://mate.asfusion.com/" 
		   xmlns:views="org.bigbluebutton.modules.chat.views.*">
	
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
	<mate:Listener type="{ShortcutEvent.FOCUS_CHAT_WINDOW}" method="focusWindow" />
	<mate:Listener type="{ShortcutEvent.MINIMIZE_CHAT}" method="remoteMinimize" />
	<mate:Listener type="{ShortcutEvent.MAXIMIZE_CHAT}" method="remoteMaximize" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.core.FlexGlobals;
			
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.modules.chat.model.ChatOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var _xPosition:int;
			private var _yPosition:int;
			private var keyCombos:Object;
			private var disp:Dispatcher = new Dispatcher();
			private var dispState:String;
			[Bindable] public var chatOptions:ChatOptions;
			
			public function getPrefferedPosition():String{
				return chatOptions.position;
			} 
			
			private function onCreationComplete():void {
				/* Set up full screen handler. */
				FlexGlobals.topLevelApplication.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				dispState = FlexGlobals.topLevelApplication.stage.displayState;
				
				hotkeyCapture();
				titleBarOverlay.tabIndex = chatOptions.baseTabIndex;
				
				minimizeBtn.tabIndex = chatOptions.baseTabIndex+1;
				maximizeRestoreBtn.tabIndex = chatOptions.baseTabIndex+2;
				closeBtn.tabIndex = chatOptions.baseTabIndex+3;

				resourcesChanged(); // update the window controls once they've been created
			}
			
			private function loadKeyCombos(modifier:String):void {
				keyCombos = new Object(); // always start with a fresh array
			    keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.focusTabs') as String)] = ShortcutEvent.FOCUS_CHAT_TABS;
				
				// Get sent to chatView
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.focusBox') as String)] = ShortcutEvent.FOCUS_CHAT_BOX;
				
				// Get sent to chatBox
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.changeColour') as String)] = ShortcutEvent.CHANGE_FONT_COLOUR;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.sendMessage') as String)] = ShortcutEvent.SEND_MESSAGE;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.closePrivate') as String)] = ShortcutEvent.CLOSE_PRIVATE;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.general.maximize') as String)] = ShortcutEvent.MAXIMIZE_CHAT;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.general.minimize') as String)] = ShortcutEvent.MINIMIZE_CHAT;
			}
		
		    private function hotkeyCapture():void{
		      this.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
		      ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
		    }
		
			// Handle general-access hotkeys, regardless of what window the user is focused in
		    private function handleKeyDown(e:KeyboardEvent) :void {
		      var modifier:String = ExternalInterface.call("determineModifier");
			  loadKeyCombos(modifier);			  
			  var keyPress:String = (e.ctrlKey  ? "control+" : "") + (e.shiftKey ? "shift+"   : "") +
		                            (e.altKey   ? "alt+"     : "") + e.keyCode;		                              
		      if (keyCombos[keyPress]) {
		        disp.dispatchEvent(new ShortcutEvent(keyCombos[keyPress]));
		      }
		    }
			
			private function remoteMinimize(e:ShortcutEvent):void{
				if (!minimized){
					this.minimize();
				}
			}
			
			private function remoteMaximize(e:ShortcutEvent):void{
				if (!maximized && !minimized){
					this.maximize();
				}
				else{
					this.restore();
				}				
			}
			
			private function focusWindow(e:ShortcutEvent):void{
				focusManager.setFocus(titleBarOverlay);
			}
			
			private function fullScreenHandler(evt:FullScreenEvent):void {
/*				dispState = FlexGlobals.topLevelApplication.stage.displayState + " (fullScreen=" + evt.fullScreen.toString() + ")";
				if (evt.fullScreen) {
					txtMsg.text = "Chat not enabled in full screen mode";
					txtMsg.enabled = false;
					sendBtn.enabled = false;
				} else {
					txtMsg.text = "";
					txtMsg.enabled = true;
					sendBtn.enabled = true;
				}
*/			}		
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString("bbb.chat.title");
				
				if (titleBarOverlay != null) {
					titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.chat.titleBar');
				}
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.chat.minimizeBtn.accessibilityName");
					
					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.chat.maximizeRestoreBtn.accessibilityName");
					
					closeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.chat.closeBtn.accessibilityName");
				}
			}
			
			private function localeChanged(e:Event):void{
				resourcesChanged();
			}
            
      private function enableMessageEntryTextBox():void {
//        txtMsg.enabled = true;
      }
            
      private function disableMessageEntryTextBox():void {
//        txtMsg.enabled = false;
      }
			
			override protected function hideAllChildren():void {
				chatView.includeInLayout=false;
			}
			
			override protected function showAllChildren():void {
				chatView.includeInLayout=true;
			}
			
		]]>
	</mx:Script>
	
	<views:ChatView id="chatView" chatOptions="{chatOptions}" includeInLayout="false"/>
</CustomMdiWindow>
