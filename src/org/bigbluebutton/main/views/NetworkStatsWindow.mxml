<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<CustomMdiWindow xmlns="org.bigbluebutton.common.*" 
		xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:mate="http://mate.asfusion.com/"
		title="Network monitor" 
		creationComplete="onCreationComplete()"
		resizable="false"
		showCloseButton="false"
		implements="org.bigbluebutton.common.IBbbModuleWindow"
		width="210" height="261" minHeight="0" minWidth="0"
		resize="onResize()">

	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.utils.Timer;
			
			import mx.effects.Fade;
			import mx.events.EffectEvent;
			import mx.formatters.NumberFormatter;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.events.CloseWindowEvent;
			import org.bigbluebutton.common.events.OpenWindowEvent;
			import org.bigbluebutton.main.model.NetworkStatsData;

			private static const LOGGER:ILogger = getClassLogger(NetworkStatsWindow);      

			private var _globalDispatcher:Dispatcher = new Dispatcher();
			private var _updateTimer:Timer = new Timer(1000);
			private var _numberFormatter:NumberFormatter = new NumberFormatter();
		
			private function onCreationComplete():void {
				this.windowControls.maximizeRestoreBtn.visible = false;
				this.windowControls.minimizeBtn.visible = false;
				
				this.x = parent.width - this.width;
				this.y = parent.height - this.height;
				
				_numberFormatter.precision = 2;
				_numberFormatter.useThousandsSeparator = true;

				_updateTimer.addEventListener(TimerEvent.TIMER, timerHandler);
				_updateTimer.start();
			}
			
	        private function timerHandler(e:TimerEvent):void {
				labelCurrentDownload.text = _numberFormatter.format(NetworkStatsData.getInstance().currentConsumedDownBW);
			 	labelTotalDownload.text   = _numberFormatter.format(NetworkStatsData.getInstance().totalConsumedDownBW);
			 	labelAvailableDownload.text   = _numberFormatter.format(NetworkStatsData.getInstance().measuredDownBW);
			 	labelDownloadLatency.text   = String(NetworkStatsData.getInstance().measuredDownLatency);

			 	labelCurrentUpload.text   = _numberFormatter.format(NetworkStatsData.getInstance().currentConsumedUpBW);
			 	labelTotalUpload.text     = _numberFormatter.format(NetworkStatsData.getInstance().totalConsumedUpBW);
			 	labelAvailableUpload.text   = _numberFormatter.format(NetworkStatsData.getInstance().measuredUpBW);
			 	labelUploadLatency.text   = String(NetworkStatsData.getInstance().measuredUpLatency);
	        }
        			
			public function getPrefferedPosition():String {
				return MainCanvas.ABSOLUTE;
			}
			
			private function onResize():void {
				LOGGER.debug("width={0} height={1}", [width, height]);
			}
			
			public function appear():void {
				var fader:Fade = new Fade();
				fader.alphaFrom = 0;
				fader.alphaTo = 1;
				fader.duration = 500;
				fader.target = this;
//				fader.addEventListener(EffectEvent.EFFECT_START, function(e:EffectEvent):void {
//					var windowEvent:OpenWindowEvent = new OpenWindowEvent(OpenWindowEvent.OPEN_WINDOW_EVENT);
//					windowEvent.window = e.currentTarget as IBbbModuleWindow;
//					_globalDispatcher.dispatchEvent(windowEvent);
//				});
				fader.play();
				var windowEvent:OpenWindowEvent = new OpenWindowEvent(OpenWindowEvent.OPEN_WINDOW_EVENT);
				windowEvent.window = this;
				_globalDispatcher.dispatchEvent(windowEvent);
				this.windowManager.bringToFront(this);
			}
			
			public function disappear():void {
				var fader:Fade = new Fade();
				fader.alphaFrom = 1;
				fader.alphaTo = 0;
				fader.duration = 500;
				fader.target = this;
				fader.addEventListener(EffectEvent.EFFECT_END, function(e:EffectEvent):void {
					var windowEvent:CloseWindowEvent = new CloseWindowEvent(CloseWindowEvent.CLOSE_WINDOW_EVENT);
					windowEvent.window = e.target as IBbbModuleWindow;
					_globalDispatcher.dispatchEvent(windowEvent);
				});
				fader.play();
			}
		]]>
	</mx:Script>
	
	
	<mx:Panel width="100%" height="100%"
	 paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" headerHeight="10">
		<mx:VBox verticalGap="0" width="100%" height="100%">
			<mx:HBox backgroundColor="haloOrange" width="100%" horizontalAlign="center"><mx:Label fontWeight="bold" text="Upload"/></mx:HBox>
			<mx:HBox horizontalGap="0"><mx:Label text="Total: "/><mx:Label id="labelTotalUpload" fontWeight="bold" text="-"/><mx:Label text="MB"/></mx:HBox>
			<mx:HBox horizontalGap="0"><mx:Label text="Current: "/><mx:Label id="labelCurrentUpload" fontWeight="bold" text="-"/><mx:Label text="Kb/s"/></mx:HBox>
			<mx:HBox horizontalGap="0"><mx:Label text="Available: "/><mx:Label id="labelAvailableUpload" fontWeight="bold" text="-"/><mx:Label text="Mb/s"/></mx:HBox>
			<mx:HBox horizontalGap="0"><mx:Label text="Latency: "/><mx:Label id="labelUploadLatency" fontWeight="bold" text="-"/><mx:Label text="ms"/></mx:HBox>
			<mx:HBox backgroundColor="haloOrange" width="100%" horizontalAlign="center"><mx:Label fontWeight="bold" text="Download"/></mx:HBox>
			<mx:HBox horizontalGap="0"><mx:Label text="Total: "/><mx:Label id="labelTotalDownload" fontWeight="bold" text="-"/><mx:Label text="MB"/></mx:HBox>
			<mx:HBox horizontalGap="0"><mx:Label text="Current: "/><mx:Label id="labelCurrentDownload" fontWeight="bold" text="-"/><mx:Label text="Kb/s"/></mx:HBox>
			<mx:HBox horizontalGap="0"><mx:Label text="Available: "/><mx:Label id="labelAvailableDownload" fontWeight="bold" text="-"/><mx:Label text="Mb/s"/></mx:HBox>
			<mx:HBox horizontalGap="0"><mx:Label text="Latency: "/><mx:Label id="labelDownloadLatency" fontWeight="bold" text="-"/><mx:Label text="ms"/></mx:HBox>
		</mx:VBox>
	</mx:Panel>

</CustomMdiWindow>
