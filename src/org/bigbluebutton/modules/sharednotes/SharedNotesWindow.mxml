<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<containers:CustomMdiWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="org.bigbluebutton.common.*" 
					 layout="absolute" width="508" height="494" implements="org.bigbluebutton.common.IBbbModuleWindow" 
					 title="Notes" creationComplete="init()" xmlns:components="org.bigbluebutton.modules.sharednotes.components.*">
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.utils.getTimer;
			
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.events.ResizeEvent;
			import mx.events.SliderEvent;
			
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.sharednotes.infrastructure.Client;
			import org.bigbluebutton.modules.sharednotes.infrastructure.ServerConnection;
			
			private var _xPosition:int, _yPosition:int;
			private var _defaultWidth:int = 400;
			private var _defaultHeight:int = 300;
			private var client:org.bigbluebutton.modules.sharednotes.infrastructure.Client;
			
			private static var _room:String;
			
			public static const SHARED_NOTES_CLOSED:String = "SHARED_NOTES_CLOSED";
			
			private var resizeTimer:Timer = new Timer(500);
			
			public function init():void {
				textArea.addEventListener(Event.CHANGE, onTextChange);
				addEventListener(ServerConnection.SYNCED_EVENT, onSynced);
				addEventListener(ServerConnection.SYNCING_EVENT, onSyncing);
				addEventListener(MDIWindowEvent.RESIZE, onResize);
				addEventListener(MDIWindowEvent.MAXIMIZE, function(e:Event):void { resizeTimer.start(); });
				addEventListener(MDIWindowEvent.RESTORE, function(e:Event):void { resizeTimer.start(); });
				addEventListener(MDIWindowEvent.CLOSE, function(e:Event):void { if (client) client.shutdown(); });
				resizeTimer.addEventListener(TimerEvent.TIMER, onResizeTimer);

				client = new Client(textArea, this);
			}
			
			private function onResizeTimer(e:Event):void {
				onResize();
				resizeTimer.stop();
			}
			
			private function addBlur():void {
				var bf:BlurFilter = new BlurFilter(0,0,0);
				
				var myFilters:Array = new Array();
				
				myFilters.push(bf);
				
				textArea.filters = myFilters;
			}
			
			private function onResize(e:Event = null):void {
				const RIGHT_PADDING:int = textArea.x * 2, TOP_PADDING:int = 35, BOTTOM_PADDING:int = 60;
				
				textArea.width = canvas.width - RIGHT_PADDING;
				textArea.height = canvas.height - BOTTOM_PADDING;
				txtPlayback.width = canvas.width - RIGHT_PADDING;
				txtPlayback.height = canvas.height - BOTTOM_PADDING - 20;
				btnPlayback.y = canvas.height - TOP_PADDING;
				btnBackPlayback.y = canvas.height - TOP_PADDING;
				icoSynced.y = canvas.height - TOP_PADDING;
				icoSyncing.y = canvas.height - TOP_PADDING;
				icoSynced.x = canvas.width - RIGHT_PADDING - 10;
				icoSyncing.x = canvas.width - RIGHT_PADDING - 10;
				playbackSlider.width = canvas.width - playbackSlider.x - RIGHT_PADDING;
				playbackSlider.y = canvas.height - BOTTOM_PADDING - 10;
				lblPlaybackVersion.y = playbackSlider.y + 3;
			}
			
			private function onSynced(e:Event):void {
				if (client.version > 0 && !btnBackPlayback.visible) { btnPlayback.visible = true; }
				icoSynced.visible = true;
				icoSyncing.visible = false;
				lblConnecting.visible = false;
			}
			
			private function onSyncing(e:Event):void {
				icoSyncing.visible = true;
				icoSynced.visible = false;
			}
			
			private function onTextChange(e:Event):void {
				onSyncing(e);
			}
			
			protected function btnPlay_clickHandler(event:MouseEvent):void
			{
				if (client.isTypingTestRunning())
				{
					client.stopTyping();
					btnPlay.label = "Start";
				}
				else
				{
					client.startTyping();
					btnPlay.label = "Stop";
				}
			}
			
			private var previousSliderValue:int = 0;
			protected function playbackSlider_changeHandler(event:SliderEvent):void
			{
				txtPlayback.text = client.getSnapshotAtVersion(previousSliderValue, event.value, txtPlayback.text);
				lblPlaybackVersion.text = "Version " + event.value + ":";
			}
			
			protected function btnPlayback_clickHandler(event:MouseEvent):void
			{
				playbackSlider.maximum = client.version;
				playbackSlider.value = 0;
				textArea.visible = false;
				btnBackPlayback.visible = true;
				btnPlayback.visible = false;
				previousSliderValue = 0;
				txtPlayback.text = client.getSnapshotAtVersion(0, 0, "");
			}
			
			protected function btnBackPlayback_clickHandler(event:MouseEvent):void
			{
				textArea.visible = true;
				btnBackPlayback.visible = false;
				btnPlayback.visible = true;
			}
			
			public function get xPosition():int {
				return _xPosition;
			} 
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}
			
			public function get defaultWidth():int{
				return _defaultWidth;
			}
			
			public function get defaultHeight():int{
				return _defaultHeight;
			}
			
			public function set defaultHeight(height:int):void{
				this._defaultHeight = height;
			}
			
			public function set defaultWidth(width:int):void{
				this._defaultWidth = width;
			}
			
			public function resetWidthAndHeight():void{
				this.width = _defaultWidth;
				this.height = _defaultHeight;
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.MIDDLE;
			}
			
			public static function set document(document:String):void {
				Client.documentName = document;
			}
			
			override public function close(event:MouseEvent=null):void {
				new Dispatcher().dispatchEvent(new Event(SHARED_NOTES_CLOSED, true));
				super.close(event);
			}
		]]>
	</mx:Script>
	<mx:Fade id="dissolveOut" duration="1000" alphaFrom="1.0" alphaTo="0.0"/>
	<mx:Fade id="dissolveIn" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>
	
	<mx:Canvas id="canvas" x="0" y="0" width="100%" height="100%">

	<mx:Button x="10" y="425" label="Playback" id="btnPlayback" click="btnPlayback_clickHandler(event)" icon="@Embed(source='images/play-icon.png')" visible="false"/>
	<mx:HSlider x="79" y="395" width="413" id="playbackSlider" liveDragging="true" snapInterval="1" change="playbackSlider_changeHandler(event)" maximum="0"/>
	<mx:TextArea x="10" y="10" width="482" height="387" id="txtPlayback"/>
	<mx:Image x="476" y="431" source="@Embed(source='images/tick.png')" id="icoSynced" visible="false" toolTip="Document up to date."/>	
	<mx:Image x="476" y="431" source="@Embed(source='images/action_refresh.gif')" id="icoSyncing" visible="false" toolTip="Updating document..."/>
	<mx:Button x="10" y="425" icon="@Embed(source='images/arrow_left.png')" id="btnBackPlayback" click="btnBackPlayback_clickHandler(event)" visible="false"/>
	<mx:Label id="lblPlaybackVersion" x="10" y="399" text="Version 0:"/>
	<components:PatchableTextArea x="10" y="10" id="textArea" hideEffect="{dissolveOut}" showEffect="{dissolveIn}" creationComplete="addBlur()" width="482" height="407"/>
	<mx:Button x="114" y="425" label="Start" id="btnPlay" click="btnPlay_clickHandler(event)" visible="false"/>
	<mx:Label x="211.5" y="186" text="Connecting..." id="lblConnecting"/>
		
	</mx:Canvas>
</containers:CustomMdiWindow>
