<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:common="org.bigbluebutton.common.*"
    xmlns:chat="org.bigbluebutton.modules.chat.views.*"
    implements="org.bigbluebutton.modules.chat.views.IChatTab"
	click="setMessageRead()" verticalScrollPolicy="off"
	creationComplete="onCreationComplete()">

  <mx:Style>
    .chatColorPickerStyle {
      backgroundColor:#E5E6E7;
      columnCount:12;
      horizontalGap:0;
      previewHeight:22;
      previewWidth:45;
      swatchGridBackgroundColor:#000000;
      swatchGridBorderSize:0;
      swatchHeight:60;
      swatchHighlightColor:#FFFFFF;
      swatchHighlightSize:1;
      swatchWidth:12;
      textFieldWidth:72;
      verticalGap:0;
    }
    
  </mx:Style>
  
	<mate:Listener type="{ChatOptionsEvent.CHANGE_FONT_SIZE}" method="changeFontSize" />
	<mate:Listener type="{ShortcutEvent.ADVANCE_MESSAGE}" method="advanceMessage" />
	<mate:Listener type="{ShortcutEvent.GOBACK_MESSAGE}" method="goBackOneMessage" />
	<mate:Listener type="{ShortcutEvent.REPEAT_MESSAGE}" method="repeatMessage" />
	<mate:Listener type="{ShortcutEvent.GOLATEST_MESSAGE}" method="goToLatestMessage" />
	<mate:Listener type="{ShortcutEvent.GOFIRST_MESSAGE}" method="goToFirstMessage" />
	<mate:Listener type="{ShortcutEvent.GOREAD_MESSAGE}" method="goToLatestReadMessage" />
  <mate:Listener type="{PrivateChatMessageEvent.PRIVATE_CHAT_MESSAGE_EVENT}" method="handlePrivateChatMessageEvent"/>
  <mate:Listener type="{PublicChatMessageEvent.PUBLIC_CHAT_MESSAGE_EVENT}" method="handlePublicChatMessageEvent"/>
  <mate:Listener type="{ShortcutEvent.FOCUS_CHAT_INPUT}" method="focusChatInput" />
  <mate:Listener type="{UserLeftEvent.LEFT}" method="handleUserLeftEvent"/>
  <mate:Listener type="{UserJoinedEvent.JOINED}" method="handleUserJoinedEvent"/>
  <mate:Listener type="{ShortcutEvent.FOCUS_CHAT_BOX}" method="focusChatBox" />
  <mate:Listener type="{ShortcutEvent.CHANGE_FONT_COLOUR}" method="focusColourPicker" />
  <mate:Listener type="{ShortcutEvent.SEND_MESSAGE}" method="remoteSendMessage" />
  <mate:Listener type="{ShortcutEvent.CHAT_DEBUG}" method="chatDebugInfo" />
  <mate:Listener type="{BBBEvent.RECONNECT_DISCONNECTED_EVENT}" receive="refreshChat(event)"/>
	
	<mate:Listener type="{LockControlEvent.CHANGED_LOCK_SETTINGS}" method="lockSettingsChanged" />

	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.accessibility.AccessibilityProperties;
			import flash.events.TextEvent;
			
			import mx.binding.utils.BindingUtils;
			
			import org.as3commons.lang.StringUtils;
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.events.LockControlEvent;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.events.UserJoinedEvent;
			import org.bigbluebutton.main.events.UserLeftEvent;
			import org.bigbluebutton.main.model.users.BBBUser;
			import org.bigbluebutton.main.model.users.Conference;
			import org.bigbluebutton.modules.chat.ChatConstants;
			import org.bigbluebutton.modules.chat.ChatUtil;
			import org.bigbluebutton.modules.chat.events.ChatOptionsEvent;
			import org.bigbluebutton.modules.chat.events.PrivateChatMessageEvent;
			import org.bigbluebutton.modules.chat.events.PublicChatMessageEvent;
			import org.bigbluebutton.modules.chat.events.SendPrivateChatMessageEvent;
			import org.bigbluebutton.modules.chat.events.SendPublicChatMessageEvent;
			import org.bigbluebutton.modules.chat.events.TranscriptEvent;
			import org.bigbluebutton.modules.chat.model.ChatConversation;
			import org.bigbluebutton.modules.chat.model.ChatOptions;
			import org.bigbluebutton.modules.chat.vo.ChatMessageVO;
			import org.bigbluebutton.modules.polling.events.StartCustomPollEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(ChatBox);      
      
      public var publicChat:Boolean = false;
      public var chatWithUserID:String;
      public var chatWithUsername:String
      
			public var read:Boolean = true;
			public var userHasLeft:Boolean = false;
			
			private var globalDispatcher:Dispatcher = new Dispatcher();
      [Bindable] public var colorPickerColours:Array = ['0x000000', '0x7A7A7A' ,'0xFF0000', '0xFF8800',
        '0x88FF00', '0x00FF00', '0x00FF88', '0x00FFFF', '0x0088FF', '0x0000FF', '0x8800FF', '0xFF00FF'];
      
			[Bindable]
			private var backgroundColor:uint = 0x000000;
			private var lastSenderId:String = "";
			private var lastTime:String = "";
			
	    [Bindable]
	    private var chatMessages:ChatConversation = new ChatConversation();
      
			private var lastCount:Number = 0;			
			private var scrollTimer:Timer;
			private var currentMessage:int;
			private var latestMessage:int; 
			
			private var reachedLatest:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.reachedLatest');
			private var reachedFirst:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.reachedFirst');
			private var navLatestString:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.navigatedLatest');
			private var navRecentString:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.navigatedLatestRead');
			private var navFirstString:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.navigatedFirst');
			
			public var focus:Boolean = false;
			private var keyCombos:Object;
			
			private var navToFirst:Boolean = false;
			private var navToLatest:Boolean = false;
			private var spacerNeeded:Boolean = false;
			private var indicatorNeeded:Boolean = false
			private var repeat:Boolean = false;
			
		      [Bindable]
		      private var chatListHeight:Number = 100;
			
			[Bindable] public var chatOptions:ChatOptions = new ChatOptions();	
      
			private function onCreationComplete():void {    
        		bindToHeightToDetermineHeightOfMessageList();
        						
				addContextMenuItems();
				scrollTimer = new Timer(750, 1);
				scrollTimer.addEventListener(TimerEvent.TIMER, onScrollTimer);
				
				// Initialize the indicator for the position in the message history, and add the listener for message history navigation
				currentMessage = -1;
				latestMessage = -1;
				
				this.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);	
				
				ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing	
				
		        hotkeyCapture();
			
		        // Listen for the ENTER key to send the message.
		        txtMsgArea.addEventListener(TextEvent.TEXT_INPUT, handleTextInput);
				txtMsgArea.addEventListener(KeyboardEvent.KEY_DOWN, handleMsgAreaKeyDown);

		        queryForChatHistory();

		        if(chatMessagesList.accessibilityProperties == null)
		        	chatMessagesList.accessibilityProperties = new AccessibilityProperties();

				chatMessagesList.accessibilityProperties.description = ResourceUtil.getInstance().getString('bbb.accessibility.chat.initialDescription');
				
				if(Capabilities.hasAccessibility)
					Accessibility.updateProperties();
				
        LOGGER.debug(" onCreationComplete. Apply lock settings");
        applyLockSettings();
			}
			
			private function focusChatBox(e:ShortcutEvent):void{
				focusManager.setFocus(chatMessagesList);
			}
			
			private function focusColourPicker(e:ShortcutEvent):void{
				focusManager.setFocus(cmpColorPicker);
			}
			
			private function remoteSendMessage(e:ShortcutEvent):void{
				sendMessages();
			}
      
      private function bindToHeightToDetermineHeightOfMessageList():void {
        // Need to bind to the height for this container to be able to calculate the height
        // of the chat message list and text area containers. If we do just percentages,
        // the text area won't get displayed especially when switching layouts (ralam Oct 18, 2012)
        BindingUtils.bindSetter(handleChangeHeight, this, "height");
      }
      
      private function handleChangeHeight(newHeight:Number):void {
        // The height for this chat box has changed. Calculate the height of the components accordingly.
        chatListHeight = newHeight - (chatCtrlBar.height + 10);
      }
      
      private function queryForChatHistory():void {
        // Setup timer to trigger querying for public chat history.
        // We have to do this to get the UI settled down. Otherwise, the text area won't show up.
        // (ralam Oct 17, 2012)
        historyTimer = new Timer(5000, 1);
        historyTimer.addEventListener(TimerEvent.TIMER, loadChatHistory);
        historyTimer.start();
      }
      
      private var historyTimer:Timer;
      
      private function loadChatHistory(event:TimerEvent):void {
        if (publicChat) {
          var disp:Dispatcher  = new Dispatcher();
          disp.dispatchEvent(new TranscriptEvent(TranscriptEvent.LOAD_TRANSCRIPT));
        }
      }
      
      private function handleUserLeftEvent(event:UserLeftEvent):void {
        // Handle user leaving so that the user won't be talking to someone not there.
        if (!publicChat && event.userID == chatWithUserID) {
          displayUserHasLeftMessage();
          txtMsgArea.enabled = false;
          scrollToEndOfMessage();
        }
      }

      private function refreshChat(e:BBBEvent):void {
        if (e.payload.type == "BIGBLUEBUTTON_CONNECTION") {
          if (publicChat) chatMessages = new ChatConversation();
        }
      }

      private function handleUserJoinedEvent(event:UserJoinedEvent):void {
        // Handle user joining so that the user can start to talk if the person rejoins
        if (!publicChat && event.userID == chatWithUserID) {
          displayUserHasJoinedMessage();
          txtMsgArea.enabled = true;
          scrollToEndOfMessage();
        }
      }
      
      private var SPACE:String = " ";
      private function displayUserHasLeftMessage():void {
        var msg:ChatMessageVO = new ChatMessageVO();
        msg.chatType = ChatConstants.PUBLIC_CHAT;
        msg.fromUserID = SPACE;
        msg.fromUsername = SPACE;
        msg.fromColor = "0";
        msg.fromTime = new Date().getTime();
        msg.fromTimezoneOffset = new Date().getTimezoneOffset();
        msg.toUserID = SPACE;
        msg.toUsername = SPACE;
        msg.message = "<b><i>"+ResourceUtil.getInstance().getString('bbb.chat.private.userLeft')+"</b></i>";
        
        chatMessages.newChatMessage(msg);
      }
      
      private function displayUserHasJoinedMessage():void {
        var msg:ChatMessageVO = new ChatMessageVO();
        msg.chatType = ChatConstants.PUBLIC_CHAT;
        msg.fromUserID = SPACE;
        msg.fromUsername = SPACE;
        msg.fromColor = "0";
        msg.fromTime = new Date().getTime();
        msg.fromTimezoneOffset = new Date().getTimezoneOffset();
        msg.toUserID = SPACE;
        msg.toUsername = SPACE;
        msg.message = "<b><i>"+ResourceUtil.getInstance().getString('bbb.chat.private.userJoined')+"</b></i>";
        
        chatMessages.newChatMessage(msg);
      }
      
      public function focusToTextMessageArea():void {
        txtMsgArea.setFocus();
        txtMsgArea.drawFocus(true);
      }
			
      private function handlePublicChatMessageEvent(event:PublicChatMessageEvent):void {
        if (publicChat) {
          chatMessages.newChatMessage(event.message);
          if (!event.history) {
            scrollToEndOfMessage();
          }
        }
      }
      
      private function handlePrivateChatMessageEvent(event:PrivateChatMessageEvent):void {
        var message:ChatMessageVO = event.message;
        
        if (!publicChat && 
          ( (message.fromUserID == chatWithUserID && UsersUtil.isMe(message.toUserID)) ||
            (message.toUserID == chatWithUserID && UsersUtil.isMe(message.fromUserID)) )) {
          chatMessages.newChatMessage(event.message);
          scrollToEndOfMessage();
        }        
      }
      
      public function handleFirstPrivateMessage(event:PrivateChatMessageEvent):void {
        handlePrivateChatMessageEvent(event);
      }
      
      public function displayHowToCloseMessage():void {
        var modifier:String = ExternalInterface.call("determineModifier");
        var keyCombo:String = modifier + String.fromCharCode(int(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.closePrivate')));
        
        var msg:ChatMessageVO = new ChatMessageVO();
        msg.chatType = ChatConstants.PUBLIC_CHAT;
        msg.fromUserID = SPACE;
        msg.fromUsername = SPACE;
        msg.fromColor = "0";
        msg.fromTime = new Date().getTime();
        msg.fromTimezoneOffset = new Date().getTimezoneOffset();
        msg.toUserID = SPACE;
        msg.toUsername = SPACE;
        msg.message = "<b><i>"+ResourceUtil.getInstance().getString('bbb.chat.private.closeMessage', [keyCombo])+"</b></i>";
        
        chatMessages.newChatMessage(msg);
      }
      
      public function scrollToEndOfMessage():void {
        /**
         * Trigger to force the scrollbar to show the last message.
         */	
        if (scrollTimer != null) scrollTimer.start();
      }
      
		
			/**
			 * Magic sauce to force scrollbar to the bottom message. This took a lot
			 * of trial and error. If you change this, make sure you know what you are
			 * doing as I don't know why it works, but it does. (ralam Nov 3, 2010)
			 * 
			 * New and improved scrollToBottom implemented (capilkey Dec 4, 2014)
			 */
			private function scrollToBottom():void {
				chatMessagesList.scrollToBottom();
			}
			
			private function onScrollTimer(event:TimerEvent):void {
				scrollToBottom();
			}
						
			public function setMessageUnread():void{
				this.read = false;
				backgroundColor = 0xFFFF00;
			}
			
			public function setMessageRead():void{
				this.read = true;
				backgroundColor = 0x000000;
			}
			
			private function onLinkClick(e:TextEvent):void {
				var url:URLRequest = new URLRequest(e.text);
				navigateToURL(url, '_blank');
			}
			
			private function changeFontSize(e:ChatOptionsEvent):void {
				this.setStyle("fontSize", e.fontSize);
			}
			
			private function addContextMenuItems():void {
				var contextMenu:ContextMenu = new ContextMenu();
				contextMenu.hideBuiltInItems();
				
				var copyAllButton:ContextMenuItem = new ContextMenuItem(ResourceUtil.getInstance().getString("bbb.chat.contextmenu.copyalltext"));
				copyAllButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				contextMenu.customItems.push(copyAllButton);
				
				this.contextMenu = contextMenu;
			}
			
			private function menuItemHandler(e:ContextMenuEvent):void{
				if (e.target.caption == ResourceUtil.getInstance().getString("bbb.chat.contextmenu.copyalltext")){
					System.setClipboard(chatMessages.getAllMessageAsString());
				}
			}
			
			
			// Determines for navigateMessages() whether the message to be spoken by the screen-reader needs an extra space added to the end or not
			private function setDescription():Boolean{
				var chatHistorySpacer:Boolean = false;
				if (chatMessagesList.accessibilityProperties.description == chatMessages.messages.getItemAt(currentMessage).toString()) {
		          	chatHistorySpacer = true;
		        }
				return chatHistorySpacer;
			}
			
			public function getLatestMessage():int{
				return latestMessage;
			}
			
			public function getCurrentMessage():int{
				return currentMessage;
			}
			
			private function localeChanged(e:Event):void {
				var modifier:String = ExternalInterface.call("determineModifier");
		  		loadKeyCombos(modifier);
				
				addContextMenuItems();
			}

			private function loadKeyCombos(modifier:String):void {
				keyCombos = new Object(); // always start with a fresh array
				//keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.debug') as String)] = ShortcutEvent.CHAT_DEBUG;
				//keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.repeat') as String)] = ShortcutEvent.REPEAT_MESSAGE;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.goread') as String)] = ShortcutEvent.GOREAD_MESSAGE;
				// Special cases: Using the arrow keys with no modifiers
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.advance') as String)] = ShortcutEvent.ADVANCE_MESSAGE;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.goback') as String)] = ShortcutEvent.GOBACK_MESSAGE;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.golatest') as String)] = ShortcutEvent.GOLATEST_MESSAGE;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.gofirst') as String)] = ShortcutEvent.GOFIRST_MESSAGE;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.repeat') as String)] = ShortcutEvent.REPEAT_MESSAGE;
			}
			
			public function hotkeyCapture():void{
			    this.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
		    }
			
			private function handleKeyDown(e:KeyboardEvent) :void {
		  		var modifier:String = ExternalInterface.call("determineModifier");
		  		loadKeyCombos(modifier);
		  
		  		var keyPress:String = (e.ctrlKey  ? "control+" : "") + (e.shiftKey ? "shift+"   : "") + (e.altKey   ? "alt+"     : "") + e.keyCode;
				
				if (keyCombos[keyPress]) {
					LOGGER.debug("WATERFALL: Caught shortcut in chat box, {0}", [keyCombos[keyPress]]);
					var event:ShortcutEvent = new ShortcutEvent(keyCombos[keyPress]);
					event.otherUserID = chatWithUserID;
					globalDispatcher.dispatchEvent(event);
				}
		    }
			      
			private function advanceMessage(e:ShortcutEvent):void{
				if (e.otherUserID == chatWithUserID){
					if (currentMessage < (chatMessages.numMessages() - 1)){
						currentMessage++;
					} else {
						chatMessagesList.accessibilityProperties.description += " ";
						repeat = true;
					}
					navigationMaintenance();
				}
			}
			
			private function goBackOneMessage(e:ShortcutEvent):void {
				if (e.otherUserID == chatWithUserID){
					if (currentMessage > 0){
						currentMessage--;
					}
					else if (currentMessage < 0){
						currentMessage = 0;
						latestMessage = 0;
					}
					else{
						chatMessagesList.accessibilityProperties.description += " ";
						repeat = true;
					}
					navigationMaintenance();
				}
			}
			
			private function repeatMessage(e:ShortcutEvent):void {
				if (currentMessage < 0){
					currentMessage = 0;
					latestMessage = 0;
					if (chatMessages.messages.length > 0)
						chatMessagesList.accessibilityProperties.description = chatMessages.messages.getItemAt(currentMessage).toString();
				}
				if (e.otherUserID == chatWithUserID){
					chatMessagesList.accessibilityProperties.description += " ";
					repeat = true;
					navigationMaintenance();
				}
			}
			
			private function goToLatestMessage(e:ShortcutEvent):void {
				if (latestMessage < 0){
					currentMessage = 0;
					latestMessage = 0;
				}
				if (e.otherUserID == chatWithUserID){
					currentMessage = chatMessages.numMessages() - 1;
					navToLatest = true;
					spacerNeeded = setDescription();
					indicatorNeeded = true;
					chatMessagesList.accessibilityProperties.description = navLatestString + " " + chatMessages.messages.getItemAt(currentMessage).toString();
					navigationMaintenance();
				}
			}
			
			private function goToFirstMessage(e:ShortcutEvent):void {
				if (e.otherUserID == chatWithUserID){
					currentMessage = 0;
					navToFirst = true;
					spacerNeeded = setDescription();
					indicatorNeeded = true;
					chatMessagesList.accessibilityProperties.description = navFirstString + " " + chatMessages.messages.getItemAt(currentMessage).toString();
					navigationMaintenance();
				}
			}
			
			private function goToLatestReadMessage(e:ShortcutEvent):void {
				if (e.otherUserID == chatWithUserID){
					if (latestMessage < 0) {
						latestMessage = 0;
					}
					currentMessage = latestMessage;
					chatMessagesList.accessibilityProperties.description = navRecentString + " " + chatMessages.messages.getItemAt(currentMessage).toString();
					navigationMaintenance();
				}
			}
			
			private function navigationMaintenance():void {
				// Update the latestMessage counter for new message notifications
				if (currentMessage > latestMessage)
					latestMessage = currentMessage;
					
				if (!repeat){
				// Make it clear to the user that they have either navigated to or reached one end of the message history or the other.
					if (currentMessage == 0){
						if (!navToFirst){
							indicatorNeeded = true;
							chatMessagesList.accessibilityProperties.description = reachedFirst + " " + chatMessages.messages.getItemAt(currentMessage).toString();
						}
					}
					else if (currentMessage == chatMessages.numMessages() - 1){
						if (!navToLatest){
							indicatorNeeded = true;
							chatMessagesList.accessibilityProperties.description = reachedLatest + " " + chatMessages.messages.getItemAt(currentMessage).toString();			
						}
					}
					else{
						// Set the accessibility description to the indicated message
						chatMessagesList.accessibilityProperties.description = chatMessages.messages.getItemAt(currentMessage).toString();
					}
					
					// Add a single space to the end of the accessibilityProperties.description if necessary to ensure that it reflects the current message after being updated.
					if (spacerNeeded || setDescription()){
						chatMessagesList.accessibilityProperties.description += " ";
					}
				}
				if(Capabilities.hasAccessibility)
					Accessibility.updateProperties();
				navToFirst = false;
				navToLatest = false;
				spacerNeeded = false;
				indicatorNeeded = false
				repeat = false;
				LOGGER.debug("Done with navigationMaintenance(); description is now {0}", [chatMessagesList.accessibilityProperties.description]);
			}
			
			// General-purpose developer method, used during testing of ChatBox accessibility
			private function chatDebugInfo(e:ShortcutEvent):void{
				LOGGER.debug("----CHAT DEBUG INFORMATION----");
					var num:int = chatMessages.numMessages();
					LOGGER.debug("Printing all chat messages of the {0} present:", [num]);
					for (var i:int = 0; i < num; i++){
						if (chatMessages.messages.getItemAt(i) != null)
							LOGGER.debug("Message {0}: {1}", [i, chatMessages.messages.getItemAt(i).toString()]);
						else
							LOGGER.debug("Message {0} is NULL", [i]);
					}
					
					/*
					LogUtil.debug("chatWithUserID is: " + chatWithUserID);
					LogUtil.debug("currentMessage is: " + currentMessage);
					LogUtil.debug("latestMessage is: " + latestMessage);
					LogUtil.debug("Focused message is: " + chatMessages.messages.getItemAt(currentMessage).toString());
					LogUtil.debug("Number of messages is: " + chatMessages.messages.length);
					LogUtil.debug("chatMessagesList.accessibilityProperties.description is: " + chatMessagesList.accessibilityProperties.description);
					*/
					//LogUtil.debug("repeat is: " + repeat);
					//LogUtil.debug("navToFirst is: " + navToFirst);
					//LogUtil.debug("indicatorNeeded is: " + indicatorNeeded);
					//LogUtil.debug("navToLatest is: " + navToLatest);
					//LogUtil.debug(" is: " + ); 
				
				LOGGER.debug("------------------------------");
			}
     
      private function sendStartCustomPollEvent(answers:Array):void {
        var dispatcher:Dispatcher = new Dispatcher();
        dispatchEvent(new StartCustomPollEvent("Custom", answers));				
      }
			
      private function sendPublicChatMessage(message:String):void {
		//var pollRegex:RegExp = /^@poll\s+?((?:[^,]+?\s*?,\s*?)*?[^,]+?)\s*?$/;
		var pollRegex:RegExp = /^@poll\s+?(.+)\s*?$/;
		var matchedArray:Array = message.match(pollRegex);
		
		if (UsersUtil.amIPresenter() && pollRegex.test(message)) {
			var tmpAnswers: Array = matchedArray[1].split(",");
			var answers:Array = new Array();
			for (var i:int = 0; i < tmpAnswers.length; i++) {
				var t:String = tmpAnswers[i] as String;
				answers.push(StringUtils.trim(t));
			}
			sendStartCustomPollEvent(answers);
		} else {
			var publicEvent:SendPublicChatMessageEvent = new SendPublicChatMessageEvent(SendPublicChatMessageEvent.SEND_PUBLIC_CHAT_MESSAGE_EVENT);
			var cm:ChatMessageVO = new ChatMessageVO();
			cm.chatType = ChatConstants.PUBLIC_CHAT;
			cm.fromUserID = UsersUtil.getMyUserID();
			cm.fromUsername = UsersUtil.getMyUsername();
			// get the color value from ColorPicker
			cm.fromColor =  cmpColorPicker.selectedColor.toString();
			// Get the current UTC time and the timezone for this sender.
			// The receiver will have to convert this to local time.
			var now:Date = new Date();
			cm.fromTime = now.valueOf();
			cm.fromTimezoneOffset = now.getTimezoneOffset();
			
			//cm.message = ChatUtil.parseURLs(ChatUtil.cleanup(message));
			cm.message = ExternalInterface.call('parseURLs', (ChatUtil.cleanup(message)));
			
			publicEvent.chatMessage = cm;
			globalDispatcher.dispatchEvent(publicEvent);			
		}
      }
      
      private function sendPrivateChatMessage(message:String):void {
        var privateEvent:SendPrivateChatMessageEvent = new SendPrivateChatMessageEvent(SendPrivateChatMessageEvent.SEND_PRIVATE_CHAT_MESSAGE_EVENT);
        var cm:ChatMessageVO = new ChatMessageVO();
        cm.chatType = ChatConstants.PRIVATE_CHAT;
        cm.fromUserID = UsersUtil.getMyUserID();
        cm.fromUsername = UsersUtil.getMyUsername();
		// get the color value from ColorPicker
        cm.fromColor = cmpColorPicker.selectedColor.toString();
        
        // Get the current UTC time and the timezone for this sender.
        // The receiver will have to convert this to local time.
        var now:Date = new Date();
        cm.fromTime = now.valueOf();
        cm.fromTimezoneOffset = now.getTimezoneOffset();
                
        //cm.message = ChatUtil.parseURLs(ChatUtil.cleanup(message));
        cm.message = ExternalInterface.call('parseURLs', (ChatUtil.cleanup(message)));
        cm.toUserID = chatWithUserID;
        cm.toUsername = chatWithUsername;
        
        privateEvent.chatMessage = cm;
        globalDispatcher.dispatchEvent(privateEvent);
      }

      private function handleTextInput(e:TextEvent):void {
		if ((e.text.length == 1) && (e.text.charCodeAt(0) == 10) /*ENTER-KEY*/ && messageCanBeSent) {
			sendMessages();
			e.preventDefault();
		}
	  }
			
	  private function handleMsgAreaKeyDown(e:KeyboardEvent):void {
		  if ((e.shiftKey || e.ctrlKey) && e.keyCode == Keyboard.ENTER) {
			  txtMsgArea.text += "\n";
			  txtMsgArea.setSelection(txtMsgArea.text.length, txtMsgArea.text.length);
		  }
	  }
      
      private function handleTextAreaKeyDownEvent(e:KeyboardEvent):void {
        // stops window moving when trying to navigate the text box
        if (e.keyCode == Keyboard.LEFT || e.keyCode == Keyboard.RIGHT) {
          e.stopPropagation();
        }
      }
      
      private function sendMessages():void {
		  if(!sendBtn.enabled) {
			  txtMsgArea.text = StringUtils.trim(txtMsgArea.text);
			  return;
		  }
		  
        // Trim the message. This will trim the '/n' char so we don't send a message when the
        // user just hits the enter key
        var msgToSend:String = StringUtils.trim(txtMsgArea.text);
        
        if (!StringUtils.isBlank(msgToSend)){
          if (publicChat) {
            sendPublicChatMessage(msgToSend);
          } else {
            sendPrivateChatMessage(msgToSend);
          }
        }
        txtMsgArea.text = "";
        txtMsgArea.validateNow();
        txtMsgArea.setSelection(0, 0);
      }
	  
	  private function showMessageTooLong(messageLength : int):void {
		  msgTooLongLabel.text = ResourceUtil.getInstance().getString('bbb.chat.chatMessage.tooLong', [(messageLength - chatOptions.maxMessageLength).toString()]);
		  msgTooLongLabel.includeInLayout = msgTooLongLabel.visible = true;
		  if (chatCtrlBar.height != 80) {
			  chatCtrlBar.height = 80;
			  chatListHeight -= 20;  
		  }
		  // The case where lock settings are set
		  if (txtMsgArea.enabled) {
			  sendBtn.enabled = false;
		  }
	  }
	  
	  private function hideMessageTooLong():void {
		msgTooLongLabel.includeInLayout = msgTooLongLabel.visible = false;
		if (chatCtrlBar.height != 60) {
			chatCtrlBar.height = 60;
			chatListHeight += 20;  
		}
		// The case where lock settings are set
		if (txtMsgArea.enabled) {
			sendBtn.enabled = true;
		}
	  }
	  
		private function focusChatInput(e:ShortcutEvent):void{
			txtMsgArea.setFocus();
		}
			
		private function lockSettingsChanged(e:Event):void {
			applyLockSettings();
		}
		
		private function applyLockSettings():void {
			var userManager:UserManager = UserManager.getInstance();
			var conference:Conference = userManager.getConference();
			var me:BBBUser = conference.getMyUser();
			if (publicChat) {
				txtMsgArea.enabled = sendBtn.enabled = !me.disableMyPublicChat;
			} else {
				txtMsgArea.enabled = sendBtn.enabled = !me.disableMyPrivateChat;
			}
		}
		
		private function get messageCanBeSent() : Boolean {
			return StringUtils.trim(txtMsgArea.text).length <= chatOptions.maxMessageLength;
		}
			
		protected function txtMsgAreaChangeHandler(event:Event):void
		{
			if (!messageCanBeSent) {
				showMessageTooLong(StringUtils.trim(txtMsgArea.text).length);
			}
			else {
				hideMessageTooLong();
			}
		}
		]]>
		
	</mx:Script>

  <common:TabIndexer id="tabIndexer" tabIndices="{[chatMessagesList, txtMsgArea, sendBtn, cmpColorPicker]}"/>
	
  <mx:HBox width="100%" height="{chatListHeight}" verticalScrollPolicy="off">
    <chat:AdvancedList width="100%" height="{chatListHeight}" id="chatMessagesList" selectable="false" variableRowHeight="true" 
             itemRenderer="org.bigbluebutton.modules.chat.views.ChatMessageRenderer" verticalScrollPolicy="on" horizontalScrollPolicy="off" wordWrap="true"
             dataProvider="{chatMessages.messages}"
             accessibilityName="{ResourceUtil.getInstance().getString('bbb.chat.messageList')}" />    
  </mx:HBox>
  
  <mx:HBox id="chatCtrlBar" width="100%" height="60" styleName="chatControlBarStyle" verticalScrollPolicy="off"
           paddingLeft="5" paddingRight="5">	
	<mx:VBox width="100%" height="100%">
	  <mx:TextArea id="txtMsgArea" width="100%" height="100%"
	               styleName="chatControlBarTextMsgStyle"
				   change="txtMsgAreaChangeHandler(event)"
	               toolTip="{ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatwindow.input')}"
			       accessibilityName="{ResourceUtil.getInstance().getString('bbb.chat.input.accessibilityName')}" />
	  <mx:Label id="msgTooLongLabel" width="100%" height="100%" includeInLayout="false" visible="false"/>
	</mx:VBox>
    <mx:VBox verticalScrollPolicy="off" verticalAlign="middle" height="100%" >
      <mx:Button label="{ResourceUtil.getInstance().getString('bbb.chat.sendBtn')}" id="sendBtn"
                 styleName="chatControlBarSendButtonStyle"
                 toolTip="{ResourceUtil.getInstance().getString('bbb.chat.sendBtn.toolTip')}" 
                 click="sendMessages()"
                 accessibilityName="{ResourceUtil.getInstance().getString('bbb.chat.sendBtn.accessibilityName')}"/>  
		<mx:ColorPicker id="cmpColorPicker" showTextField="false" width="100%" visible="{chatOptions.colorPickerIsVisible}" includeInLayout="{chatOptions.colorPickerIsVisible}" 
						toolTip="{ResourceUtil.getInstance().getString('bbb.chat.cmpColorPicker.toolTip')}" 
						selectedColor="0x000000" dataProvider="{colorPickerColours}" swatchPanelStyleName="chatColorPickerStyle"/>
    </mx:VBox>
  </mx:HBox>	
</mx:VBox>
