<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<containers:MDICanvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="flexlib.mdi.containers.*" >
	
	<mx:Script>
		<![CDATA[
			import mx.utils.ArrayUtil;
			
			import flexlib.mdi.containers.MDIWindow;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;

			public static const TOP_2_3:String = "top-two-thirds";
			public static const BOTTOM_1_3:String = "bottom-one-third";
			public static const BOTTOM_1_3_RIGHT:String = "bottom-one-third-right";
			public static const TOP_LEFT:String = "top-left";
			public static const BOTTOM_LEFT:String = "bottom-left";
			public static const MIDDLE:String = "middle";
			public static const BOTTOM:String = "bottom";
			public static const TOP_RIGHT:String = "top-right";
			public static const BOTTOM_RIGHT:String = "bottom-right";
			public static const POPUP:String = "popup";
			public static const ABSOLUTE:String = "absolute";
			
			private static const LOGGER:ILogger = getClassLogger(MainCanvas);      

			public static const DESKTOP_SHARING_VIEW:String = "POP_UP_DESKSHARE_VIEW";
			public static const DESKTOP_SHARING_PUBLISH:String = "POP_UP_DESKSHARE_PUBLISH";
			
			private var leftWindowWidth:Number;
			private var leftWindowHeight:Number;
			
			private var centerWindowWidth:Number;
			private var centerWindowHeight:Number;
			
			private var rightWindowWidth:Number;
			private var rightWindowHeight:Number;
			
			private static const MIN_HEIGHT:int = 768;
			
			private function determineWindowSizes():void{
				
			}
			
			public function addWindow(window:IBbbModuleWindow):void{
				windowManager.add(window as MDIWindow);
				positionWindow(window);
			}
			
			public function removeWindow(window:IBbbModuleWindow):void{
				// the flexlib windowManager remove method doesn't test if the given window is on the windows list
				// this test avoid some exceptions when run the app on debugger flash player
				if (ArrayUtil.getItemIndex(window, windowManager.windowList) != -1) {
					windowManager.remove(window as MDIWindow);
				} else {
					LOGGER.debug("Trying to remove the window [ {0} ] but it's not a MainCanvas child", [window]);
				}
			}
			
			/**
			 * Removes all display list containers created using PopUpManager
			 */
			public function removeAllPopUps():void{
				for (var i:int = systemManager.numChildren-1; i>0; i-=1){
					if(!(systemManager.getChildAt(i) is LoggedOutWindow)){
						systemManager.removeChildAt(i);
					}
				}
			}
			
			public function resetWindowLayout():void{
				var windows:Array = this.windowManager.getOpenWindowList();
				for (var i:Number=0; i<windows.length; i++){
					var window:IBbbModuleWindow = windows[i] as IBbbModuleWindow;
					positionWindow(window);
				}
			}
			
			private function positionWindow(window:IBbbModuleWindow):void{
				leftWindowHeight = this.height/3;
				leftWindowWidth = 245;
				rightWindowHeight = this.height * 0.6;
				rightWindowWidth = (this.width / 20) * 6;
				centerWindowHeight = this.height - 10;
				centerWindowWidth = this.width / 2;
				
				var position:String = window.getPrefferedPosition();
				var win:MDIWindow = window as MDIWindow;
				if (win.minimized || win.maximized)
					win.restore();
				var x:Number;
				var y:Number;
				switch(position){
					case TOP_2_3:
						x = 1;
						y = 1;
						win.width = this.width;
						win.height = ((this.height/3) * 2) - 2;
						break;
					case BOTTOM_1_3:
						x = 1;
						y = (this.height/3) * 2 + 2;
						win.width = this.width - leftWindowWidth;
						win.height = (this.height/3) - 2;
						break;
					case BOTTOM_1_3_RIGHT:
						x = this.width - leftWindowWidth;
						y = (this.height/3) * 2 + 2;
						win.width = leftWindowWidth;
						win.height = (this.height/3) - 2;
						break;
					case TOP_LEFT:
						x = 1;
						y = 1;
						win.width = leftWindowWidth;
						win.height = leftWindowHeight;
						break;
					case BOTTOM_LEFT:
						x = 1;
						y = leftWindowHeight + 10;
						win.width = leftWindowWidth;
						win.height = leftWindowHeight;
						break;
					case MIDDLE:
						x = leftWindowWidth + 10;
						y = 1;
						win.width = centerWindowWidth;
						win.height = centerWindowHeight;
						break;
					case BOTTOM:
						x = 1;
						y = this.height - 300;
						win.width = this.width - 5;
						win.height = 300;
						break;
					case TOP_RIGHT:
						x = this.width - rightWindowWidth - 10;
						y = 1;
						win.width = rightWindowWidth;
						/**
						 * If the display is small, we want the chat window
						 * to occupy the whole top-to-bottom region. This
						 * removes the problem where the chat doesn't display
						 * properly because the window is small.
						 */
						if (this.height < MIN_HEIGHT) {
							win.height = this.height - 3;
						} else {					
							win.height = rightWindowHeight;
						}
						break;
					case BOTTOM_RIGHT:
						/**
						 * If the display is small, move the video dock
						 * window to the bottom left so that the chat
						 * window occupies the left section.
						 */
						if (this.height < MIN_HEIGHT) {
							x = 1;
							y = (this.height/3) * 2 + 15;
							win.width = leftWindowWidth;
							win.height = (this.height/3) - 15;							
						} else {
							x = this.width - rightWindowWidth - 10;
							y = rightWindowHeight + 10;;
							win.width = rightWindowWidth;
							win.height = this.height - rightWindowHeight - 10;							
						}
						break;					
					case POPUP:
						x = (Math.random() * this.width) - 640;
						y = (Math.random() * this.height) - 520;
						if (x < 0) x = 1;
						if (y < 0) y = 1;
						break;
					case DESKTOP_SHARING_PUBLISH:
						y = (this.height - win.height) - 23;
						x = 8;
						break;
					case DESKTOP_SHARING_VIEW:
						x = 1;
						y = 1;
						break;
					case ABSOLUTE:
						// don't reposition the window
						x = win.x;
						y = win.y;
				}
				windowManager.absPos(win, x, y);
			}
			
		]]>
	</mx:Script>
	
</containers:MDICanvas>
