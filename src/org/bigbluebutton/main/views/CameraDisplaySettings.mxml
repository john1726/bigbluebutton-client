<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
                xmlns:view="org.bigbluebutton.main.views.*"
				xmlns:common="org.bigbluebutton.common.*"
                layout="absolute" 
                verticalScrollPolicy="off" horizontalScrollPolicy="off"
                width="630" height="450" creationComplete="onCreationComplete()" styleName="cameraDisplaySettingsWindowStyle" 
                showCloseButton="false" close="onCancelClicked()" keyDown="handleKeyDown(event)">
  <mx:Script>
    <![CDATA[
		import com.asfusion.mate.events.Dispatcher;
		
		import flash.ui.Keyboard;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		
		import org.bigbluebutton.common.Images;
		import org.bigbluebutton.common.Media;
		import org.bigbluebutton.core.BBB;
		import org.bigbluebutton.core.model.VideoProfile;
		import org.bigbluebutton.main.events.BBBEvent;
		import org.bigbluebutton.util.i18n.ResourceUtil;
		
		static public var PADDING_HORIZONTAL:Number = 6;
		static public var PADDING_VERTICAL:Number = 29;
		
		private var images:Images = new Images();
		
		[Bindable] 
		private var cancelIcon:Class = images.control_play;
		
		[Bindable]
		public var _videoProfiles:ArrayCollection = new ArrayCollection();
		public var selectedVideoProfile:VideoProfile;
		public var publishInClient:Boolean;
		
		public var defaultCamera:String = null;
		public var camerasArray:Object;
		[Bindable] private var camerasAvailable:ArrayList = new ArrayList();
		public var chromePermissionDenied:Boolean = false;
		public const OFF_STATE:Number = 0;
		public const ON_STATE:Number = 1;

		private var selectedCam:int;
		private var aspectRatio:Number = 1;
		
	    override public function move(x:Number, y:Number):void
	    {
	       return;
	    }
      
		private function onCreationComplete():void {
            tabIndex = 51;
            
			if(defaultCamera != null) {
				var indexDefault:int = 0;
				for (var i:int = 0; i < Media.availableCameras; i++){
					if(camerasArray[i].status == OFF_STATE) {
						var myObj:Object = {}
						myObj.label = camerasArray[i].label;
						myObj.index = String(i);
						camerasAvailable.addItem(myObj);	
						if(myObj.index == defaultCamera)
							indexDefault = camerasAvailable.length-1;		
					}
				}
				cmbCameraSelector.selectedIndex = indexDefault;
				defaultCamera = null;
			} else {
				cmbCameraSelector.selectedIndex = 0;
			}
			
			var idx:int = 0;
			var defaultProfile:VideoProfile = BBB.defaultVideoProfile;
			for each (var value:VideoProfile in BBB.videoProfiles) {
				var item:Object = {index:idx, label:value.name, profile:value};
				_videoProfiles.addItem(item);

				if (value.id == defaultProfile.id) {
					cmbVideoProfile.selectedIndex = idx;
				}

				idx++;
			}

			if (_videoProfiles.length > 1) {
				showResControls(true);
			}
			
			if (Media.availableCameras > 1) {
				showVideoControls(true);
			}
			
			updateCamera();
		}
		
		private function showVideoControls(show:Boolean):void {
			if (show) {
				this.visible = true;
				btnStartPublish.visible = true;
			} else{					
				this.width = 0;
				this.height = 0;
				btnStartPublish.visible = false;
				this.visible = false;
			}
		}
		
		private function updateCamera():void {
			btnStartPublish.mouseEnabled = false;
			
			selectedVideoProfile = cmbVideoProfile.selectedItem.profile as VideoProfile;
			if (camerasAvailable.length > cmbCameraSelector.selectedIndex) {
				selectedCam = camerasAvailable.getItemAt(cmbCameraSelector.selectedIndex).index;
			} else {
				selectedCam = -1;
			}
			setAspectRatio(selectedVideoProfile.width,selectedVideoProfile.height);
			_video.successCallback = videoSuccess;
			_video.failCallback = videoFailure;
			_video.chromePermissionDenied = chromePermissionDenied;
			_video.updateCamera(selectedCam,selectedVideoProfile,_canvas.width, _canvas.height,true);
		}
		
		private function videoSuccess():void {
			btnStartPublish.mouseEnabled = true;
			btnStartPublish.accessibilityName = ResourceUtil.getInstance().getString('bbb.publishVideo.startPublishBtn.toolTip');
			btnStartPublish.styleName = "cameraDisplaySettingsWindowStartBtn";
		}
		
		private function videoFailure(reason:String):void {
			btnStartPublish.accessibilityName = ResourceUtil.getInstance().getString("bbb.publishVideo.startPublishBtn.errorName", [ResourceUtil.getInstance().getString(reason)]);
		}
		
		private function showResControls(show:Boolean):void {
			if (show) cmbVideoProfile.visible = true;
			else cmbVideoProfile.visible = false;
		}
		
		private function setAspectRatio(width:int, height:int):void {
			aspectRatio = (width/height);
			this.minHeight = Math.floor((this.minWidth - PADDING_HORIZONTAL) / aspectRatio) + PADDING_VERTICAL;
		}
		
		private function startPublishing():void {
			if (btnStartPublish.mouseEnabled) {
				updateCamera();
				
				var globalDispatcher:Dispatcher = new Dispatcher();
				var camEvent:BBBEvent = new BBBEvent(BBBEvent.CAMERA_SETTING);
				camEvent.payload.cameraIndex = selectedCam;
				camEvent.payload.videoProfile = selectedVideoProfile;
				camEvent.payload.publishInClient = publishInClient;
				camEvent.payload.restream = true;
				
				globalDispatcher.dispatchEvent(camEvent);
				
				close("close");
			}
		}
		
		private function disableCamera():void {
			if(_video != null){
				_video.disableCamera();
			}
		}
		
		private function handleKeyDown(event:KeyboardEvent):void {
			if (event.charCode == Keyboard.ESCAPE) {
				disableCamera();
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
		}
		
		private function onCancelClicked():void {
			close("cancel");
		}
		
		private function showCameraSettings():void {
			Security.showSettings(SecurityPanel.CAMERA);
		}
		
		private function close(payload:String):void {
			disableCamera();
			
			if (_video.successCallback == videoSuccess) _video.successCallback = null;
			if (_video.failCallback == videoFailure) _video.failCallback = null;
			
			var event:BBBEvent = new BBBEvent(BBBEvent.CAM_SETTINGS_CLOSED);
			event.payload['clicked'] = payload;
			dispatchEvent(event);
			PopUpManager.removePopUp(this);
		}
      
    ]]>
  </mx:Script>
	
  <common:TabIndexer startIndex="1" tabIndices="{[textArea, cmbCameraSelector, cmbVideoProfile, btnStartPublish, btnClosePublish]}"/>
  
  <mx:VBox id="webcamDisplay" width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" styleName="cameraDisplaySettingsWindowBackground">
    <mx:TextArea width="100%" borderSkin="{null}" editable="false" text="{ResourceUtil.getInstance().getString('bbb.users.settings.webcamSettings')}" 
                   styleName="webcamSettingsWindowTitleStyle" id="textArea"/>
    <mx:HRule width="100%"/>
    <mx:Spacer height="1"/>
    
		<mx:Box id="_canvas" width="100%" height="75%" horizontalAlign="center" verticalAlign="middle">
			<view:VideoWithWarnings id="_video"/>
		</mx:Box>
        
		<mx:HBox width="100%" height="10%" horizontalAlign="center" horizontalGap="13" paddingRight="5"> 	
			<mx:ComboBox id="cmbCameraSelector" styleName="cameraDisplaySettingsWindowCameraSelector" dataProvider="{camerasAvailable}" width="150" visible="true" labelField="label" change="updateCamera()" height="30"/>
			<mx:ComboBox id="cmbVideoProfile" styleName="cameraDisplaySettingsWindowProfileComboStyle" 
						 dataProvider="{_videoProfiles}" visible="false" change="updateCamera()"
                         toolTip="{ResourceUtil.getInstance().getString('bbb.publishVideo.cmbResolution.tooltip')}" height="30" />
    </mx:HBox>
    
    <mx:HRule width="100%"/>
    
    <mx:HBox width="100%" height="10%" horizontalAlign="right" horizontalGap="13" paddingRight="5" paddingBottom="5" paddingTop="1">
      <mx:Button id="btnStartPublish" toolTip="{ResourceUtil.getInstance().getString('bbb.publishVideo.startPublishBtn.toolTip')}" 
                 click="startPublishing()" mouseEnabled="false" styleName="cameraDisplaySettingsWindowStartBtnDisabled" 
                 label="{ResourceUtil.getInstance().getString('bbb.publishVideo.startPublishBtn.labelText')}"/>
      <mx:Button id="btnClosePublish"   
                 click="onCancelClicked()" 
                 enabled="true"
                 label="{ResourceUtil.getInstance().getString('bbb.video.publish.closeBtn.label')}"
                 accessibilityName="{ResourceUtil.getInstance().getString('bbb.video.publish.closeBtn.accessName')}"/>
    </mx:HBox>
  </mx:VBox>		
</mx:TitleWindow>
