<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->


<pres:CustomMdiWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:thumb="org.bigbluebutton.modules.present.views.*"
	xmlns:pres="org.bigbluebutton.common.*"
	xmlns:code="http://code.google.com/p/flexlib/" 
	xmlns:containers="flexlib.containers.*"
	xmlns:mate="http://mate.asfusion.com/"
	showCloseButton="false" layout="absolute"
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off" 
	showControls="true" resize="resizeHandler()"
  	styleNameFocus="presentationWindowStyleFocus"
  	styleNameNoFocus="presentationWindowStyleNoFocus"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	initialize="init()"
	creationComplete="onCreationComplete()" 
	width="{DEFAULT_WINDOW_WIDTH}" height="{DEFAULT_WINDOW_HEIGHT}" 
	x="{DEFAULT_X_POSITION}" y="{DEFAULT_Y_POSITION}"
	title="{ResourceUtil.getInstance().getString('bbb.presentation.titleWithPres',[currentPresentation])}"
	xmlns:views="org.bigbluebutton.modules.present.ui.views.*" 
	xmlns:poll="org.bigbluebutton.modules.polling.views.*"
	>
	
	<mate:Dispatcher id="globalDispatcher" />
	<mate:Listener type="{ShortcutEvent.FOCUS_PRESENTATION_WINDOW}" method="focusWindow" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="handleBecomePresenter" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="handleBecomeViewer" />
	<mate:Listener type="{PresentationChangedEvent.PRESENTATION_CHANGED_EVENT}" method="handlePresentationChangedEvent" />
  	<mate:Listener type="{NavigationEvent.BIND_KEYBOARD_EVENT}" method="bindToKeyboardEvents" />
	<mate:Listener type="{UploadEvent.CLEAR_PRESENTATION}" method="clearPresentation" />
	<mate:Listener type="{DisplaySlideEvent.DISPLAY_SLIDE_EVENT}" method="handleDisplaySlideEvent" />
	<mate:Listener type="{AddOverlayCanvasEvent.ADD_OVERLAY_CANVAS}" method="addOverlayCanvas" />
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />	
	<mate:Listener type="{ShortcutEvent.UPLOAD_PRESENTATION}" method="remoteUpload" />
	<mate:Listener type="{ShortcutEvent.PREVIOUS_SLIDE}" method="remotePrevious" />
	<mate:Listener type="{ShortcutEvent.SELECT_SLIDES}" method="remoteSelect" />
	<mate:Listener type="{ShortcutEvent.NEXT_SLIDE}" method="remoteNext" />
	<mate:Listener type="{ShortcutEvent.FIT_TO_WIDTH}" method="remoteWidth" />
	<mate:Listener type="{ShortcutEvent.FIT_TO_PAGE}" method="remotePage" />	
	<mate:Listener type="{ShortcutEvent.MINIMIZE_PRES}" method="remoteMinimize" />
	<mate:Listener type="{ShortcutEvent.MAXIMIZE_PRES}" method="remoteMaximize" />
	<mate:Listener type="{PollStartedEvent.POLL_STARTED}" method="pollStartedHandler" />
	<mate:Listener type="{PollStoppedEvent.POLL_STOPPED}" method="pollStoppedHandler" />
	<mate:Listener type="{PollShowResultEvent.SHOW_RESULT}" method="pollShowResultHandler" />
	
	<mx:Script>
		<![CDATA[
			import flash.geom.Point;
			
			import mx.controls.Menu;
			import mx.events.MenuEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import flexlib.mdi.events.MDIWindowEvent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.polling.events.PollShowResultEvent;
			import org.bigbluebutton.modules.polling.events.PollStartedEvent;
			import org.bigbluebutton.modules.polling.events.PollStoppedEvent;
			import org.bigbluebutton.modules.polling.events.StartPollEvent;
			import org.bigbluebutton.modules.polling.events.VotePollEvent;
			import org.bigbluebutton.modules.polling.views.PollChoicesModal;
			import org.bigbluebutton.modules.polling.views.PollResultsModal;
			import org.bigbluebutton.modules.present.commands.GoToNextPageCommand;
			import org.bigbluebutton.modules.present.commands.GoToPrevPageCommand;
			import org.bigbluebutton.modules.present.events.AddOverlayCanvasEvent;
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import org.bigbluebutton.modules.present.events.NavigationEvent;
			import org.bigbluebutton.modules.present.events.PresentationChangedEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.modules.present.model.Page;
			import org.bigbluebutton.modules.present.model.PresentationModel;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
             		
			private static const LOGGER:ILogger = getClassLogger(PresentationWindow);      
      
      public static const TITLE:String = "Presentation";
			private static const GOTO_PAGE_BUTTON:String = "Go to Page...";
			
			[Bindable] 
      private var thumbY:Number;
			public var uploadWindow:FileUploadWindow = null;
			private var pageDialog:GotoPageDialog;
			
			[Bindable] private var DEFAULT_X_POSITION:Number = 237;
			[Bindable] private var DEFAULT_Y_POSITION:Number = 0;
			
			private static const TOP_WINDOW_BORDER:Number = 30;
			private static const WIDTH_PADDING:Number = 6;

			[Bindable] private var DEFAULT_WINDOW_WIDTH:Number = 510;
			[Bindable] private var DEFAULT_WINDOW_HEIGHT:Number = 451;
			[Bindable] private var viewportW:Number = 451;
			[Bindable] private var viewportH:Number = 451;
			
			// Init to the size of the window.
			private var currentSlideWidth:Number = DEFAULT_WINDOW_WIDTH;
			private var currentSlideHeight:Number = DEFAULT_WINDOW_HEIGHT;
									
			private var mouseDown:Boolean = false;

			[Bindable] private var currentPresentation:String = "";
			
			[Bindable] private var presentOptions:PresentOptions;
			
			private var keyCombos:Object;
			private var localDispatcher:Dispatcher = new Dispatcher();
			
			private var pollMenuData:Array;
			private var pollMenu:Menu;
			
			private var pollResultsPopUp:PollResultsModal
			private var pollChoicesPopUp:PollChoicesModal
			
			[Embed(source="../../../polling/sounds/Poll.mp3")] 
			private var noticeSoundClass:Class;
			private var noticeSound:Sound = new noticeSoundClass() as Sound;
			
			private function init():void{
				presentOptions = new PresentOptions();
			}
			
			private function onCreationComplete():void{
				//check for the polling module in config.xml
				var vxml:XML = BBB.getConfigForModule("PollingModule");
				if (vxml == null) presenterControls.removeChild(pollStartBtn);
				
				setControlBarState("presenter");
				
				thumbY = this.height - 160;
                
				bindKeyboardEvents();
				this.addEventListener(MDIWindowEvent.RESIZE_END, onResizeEndEvent);
				resourcesChanged();
				
				titleBarOverlay.tabIndex = presentOptions.baseTabIndex;
				
				hotkeyCapture();
                
        //Necessary now because of module loading race conditions
        var t:Timer = new Timer(2000, 1);
        t.addEventListener(TimerEvent.TIMER, addWhiteboardToolbar);
        t.start();
        
        if (UsersUtil.amIPresenter()) {
          becomePresenter();
        } else {
          becomeViewer();
        }
        
        setPollMenuData();
      }
			
      private function addWhiteboardToolbar(event:TimerEvent):void {
        LOGGER.debug("Sending event to add whiteboard canvas.");
         // Tell the WhiteboardManager to add the toolbar
         var e:WhiteboardButtonEvent = new WhiteboardButtonEvent(WhiteboardButtonEvent.WHITEBOARD_ADDED_TO_PRESENTATION);
         e.window = this;
         dispatchEvent(e);
      }
            
			private function hotkeyCapture():void{
			    LOGGER.debug("Entering hotkeyCapture");
			    this.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
			    ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
				LOGGER.debug("Leaving hotkeyCapture");
		    }
			
			private function loadKeyCombos(modifier:String):void {
				keyCombos = new Object(); // always start with a fresh array
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.present.focusslide') as String)] = ShortcutEvent.FOCUS_SLIDE;
				
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.general.maximize') as String)] = ShortcutEvent.MAXIMIZE_PRES;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.general.minimize') as String)] = ShortcutEvent.MINIMIZE_PRES;
				
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.present.upload') as String)] = ShortcutEvent.UPLOAD_PRESENTATION;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.present.previous') as String)] = ShortcutEvent.PREVIOUS_SLIDE;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.present.select') as String)] = ShortcutEvent.SELECT_SLIDES;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.present.next') as String)] = ShortcutEvent.NEXT_SLIDE;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.present.fitWidth') as String)] = ShortcutEvent.FIT_TO_WIDTH;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.present.fitPage') as String)] = ShortcutEvent.FIT_TO_PAGE;
				//keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.whiteboard.undo') as String)] = ShortcutEvent.UNDO_WHITEBOARD;

				keyCombos[Keyboard.LEFT] = ShortcutEvent.PREVIOUS_SLIDE;
				keyCombos[Keyboard.RIGHT] = ShortcutEvent.NEXT_SLIDE;
				keyCombos[Keyboard.PAGE_UP] = ShortcutEvent.PREVIOUS_SLIDE;
				keyCombos[Keyboard.PAGE_DOWN] = ShortcutEvent.NEXT_SLIDE;
			}
			
			// Handle presentation-scope hotkeys
			private function handleKeyDown(e:KeyboardEvent) :void {
				var modifier:String = ExternalInterface.call("determineModifier");
				loadKeyCombos(modifier);
				  
				var keyPress:String = (e.ctrlKey  ? "control+" : "") + (e.shiftKey ? "shift+"   : "") + (e.altKey   ? "alt+"     : "") + e.keyCode;
				                          
				if (keyCombos[keyPress]) {
				    //globalDispatcher.dispatchEvent(new ShortcutEvent(keyCombos[keyPress]));
				    localDispatcher.dispatchEvent(new ShortcutEvent(keyCombos[keyPress]));
				}
			}
			
			private function remoteMinimize(e:ShortcutEvent):void{
				if (!minimized){
					this.minimize();
				}
			}
			
			private function remoteMaximize(e:ShortcutEvent):void{
				if (!maximized && !minimized){
					this.maximize();
				}
				else{
					this.restore();
				}				
			}
			
			private function focusWindow(e:ShortcutEvent):void{
				focusManager.setFocus(titleBarOverlay);
			}
			
			private function resizeHandler():void {
				// When the window is maximized, we want to resize the slide maintaining the aspect ratio.			
				fitSlideToWindowMaintainingAspectRatio();
			}
			
			private function onResizeEndEvent(event:MDIWindowEvent):void {
				fitSlideToWindowMaintainingAspectRatio();
			}
			
			[Bindable] private var fitToPage:Boolean = true;
			
			private function fitSlideToWindowMaintainingAspectRatio():void {
				if (this.minimized) return;
				
				// Send the available space to display the slide.				
				sendWindowResizedEvent((this.width - WIDTH_PADDING), (this.height - controlBar.height - TOP_WINDOW_BORDER));
			}
			
			/*
			 * Notify the slide container telling it the available dimensions to display the slide.
			 */
			private function sendWindowResizedEvent(parentWidth:Number, parentHeight:Number):void {				
				slideView.onParentResized(parentWidth, parentHeight);
			}
			
			private function handleDisplaySlideEvent(event:DisplaySlideEvent):void {		
        var curPage:Page = PresentationModel.getInstance().getCurrentPage();
        if (curPage != null) {
          displaySlideNumber(curPage.num);
          currentSlideWidth = event.slideWidth;
          currentSlideHeight = event.slideHeight;		
          fitSlideToWindowMaintainingAspectRatio();          
        }			
			}
			
      private function bindToKeyboardEvents(event:NavigationEvent):void {
         if (event.bindToKeyboard) {
			 LOGGER.debug("******************************************** Binding to keyboard events ********************");
             bindKeyboardEvents();
         } else {
			 LOGGER.debug("********************************************* Unbinding to keyboard events *****************");
             unbindKeyboardEvents();
         }
      }
            
      private function unbindKeyboardEvents():void {
        stage.removeEventListener(KeyboardEvent.KEY_UP, onKeyUp);
      }

      private function bindKeyboardEvents():void {
        stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
      }
            
			// Maybe there's a problem in here too?
			private function onKeyUp(event:KeyboardEvent):void {	
                /*if (event.shiftKey && event.ctrlKey) {
                    switch (event.keyCode) {
                        case Keyboard.LEFT:
                        case Keyboard.UP:
                        case Keyboard.PAGE_UP:			
                            gotoPreviousSlide();		
                            break;
                        case Keyboard.DOWN:
                        case Keyboard.RIGHT: 
                        case Keyboard.SPACE:
                        case Keyboard.PAGE_DOWN:
                        case Keyboard.ENTER:
                            gotoNextSlide();
                            break; 
                    }                    
                }*/
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.MIDDLE;
			}
						
			private function onSliderZoom():void {
				slideView.onZoomSlide(zoomSlider.value);
			}
			
			private function dispatchResizeEvent(newSize:int):void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.RESIZE);
				presentEvent.newSizeInPercent = newSize;
				dispatchEvent(presentEvent);
			}
			
			private function onResetZoom():void {
				slideView.onZoomSlide(100);
			}

      private function handleBecomePresenter(e:MadePresenterEvent):void{
        becomePresenter();
      }
      
			private function becomePresenter():void{
				setupPresenter(true);
				addContextMenuItems();
			}
			
      private function handleBecomeViewer(e:MadePresenterEvent):void{
        becomeViewer();
      }
      
			private function becomeViewer():void{
				setupPresenter(false);
				dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
				this.customContextMenuItems = new Array();
				if (slideView.thumbnailView.visible)
					showThumbnails();
			}
						
			private function setupPresenter(isPresenter:Boolean):void {
				uploadPres.visible = isPresenter;				
				var page:Page = PresentationModel.getInstance().getCurrentPage();
				if (page != null) {
					displaySlideNumber(page.num);		
				}
				displaySlideNavigationControls(isPresenter, !!page);
				
				setControlBarState("presenter");
			}
            private function handlePresentationChangedEvent(e:PresentationChangedEvent) : void {
				currentPresentation = PresentationModel.getInstance().getCurrentPresentationName();

                slideView.setSlides();
                slideView.visible = true;
                var page : Page = PresentationModel.getInstance().getCurrentPage();
                if (page != null) {
                    displaySlideNumber(page.num);
                }

                if (UsersUtil.amIPresenter()) {
                    displaySlideNavigationControls(true, !!page);
                }
                else {
                    displaySlideNavigationControls(false, !!page)
                }
                onResetZoom();
            }

			
			private function displaySlideNavigationControls(isPresenter:Boolean, activePresentation:Boolean):void {
				var showButtons:Boolean = isPresenter && activePresentation;
				
				pollStartBtn.visible = showButtons;
				backButton.visible = showButtons;
				forwardButton.visible = showButtons;
				zoomSlider.visible = showButtons;
				btnSlideNum.visible = showButtons;
				btnFitToWidth.visible = showButtons;
				btnFitToPage.visible = showButtons;
				
				fitSlideToWindowMaintainingAspectRatio();
			}
			
			private function addContextMenuItems():void{
				var contextMenuItems:Array = new Array();
				
				var nextButton:ContextMenuItem = new ContextMenuItem(ResourceUtil.getInstance().getString('bbb.presentation.forwardBtn.toolTip'));
				nextButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void { gotoNextSlide(); });
				contextMenuItems.push(nextButton);
				
				var previousButton:ContextMenuItem = new ContextMenuItem(ResourceUtil.getInstance().getString('bbb.presentation.backBtn.toolTip'));
				previousButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void { gotoPreviousSlide(); });
				contextMenuItems.push(previousButton);
								
				this.customContextMenuItems = contextMenuItems;
			}
			
			private function notifyOthersOfSharingPresentation(presentationName:String):void {
				var shareEvent:PresenterCommands = new PresenterCommands(PresenterCommands.SHARE_PRESENTATION_COMMAND);
					shareEvent.presentationName = presentationName;
					shareEvent.share = true;
					dispatchEvent(shareEvent);
			}
										
			private function disableSlideNavigationButtons(pageNumber:int):void {
				backButton.mouseEnabled = pageNumber != 1;
				forwardButton.mouseEnabled = pageNumber < PresentationModel.getInstance().getNumberOfPages();
				
				backButton.styleName = pageNumber != 1 ? "presentationBackButtonStyle" : "presentationBackButtonDisabledStyle";
				forwardButton.styleName = pageNumber < PresentationModel.getInstance().getNumberOfPages() ? "presentationForwardButtonStyle" : "presentationForwardButtonDisabledStyle";
			}
			
			private function displaySlideNumber(currentSlide:int):void {
        disableSlideNavigationButtons(currentSlide);
				btnSlideNum.label = "" + currentSlide + '/' + PresentationModel.getInstance().getNumberOfPages();
				btnSlideNum.accessibilityName = ResourceUtil.getInstance().getString('bbb.presentation.btnSlideNum.accessibilityName', [currentSlide, PresentationModel.getInstance().getNumberOfPages()])
			}
			
      
			private function clearPresentation(e:UploadEvent):void{
				slideView.visible = false;
				slideView.slideLoader.source = null; 
				slideView.setSelectedSlide(0);
				btnSlideNum.label = "";
				
				backButton.visible = false;
				forwardButton.visible = false;
				zoomSlider.visible = false;
				btnSlideNum.visible = false;
				btnFitToWidth.visible = false;
				btnFitToPage.visible = false;

				// Change the title of the window.
				currentPresentation = ResourceUtil.getInstance().getString('bbb.presentation.title');				
			}
			
			private function gotoPreviousSlide():void {
        var curPage:Page = PresentationModel.getInstance().getCurrentPage();
        if (curPage != null) {
          LOGGER.debug("Go to previous page. Current page [{0}]", [curPage.id]);
          dispatchEvent(new GoToPrevPageCommand(curPage.id));
        } else {
          LOGGER.debug("Go to previous page. CanNOT find current page.");
        }
			}
			
			private function gotoNextSlide():void {
          var curPage:Page = PresentationModel.getInstance().getCurrentPage();
          if (curPage != null) {
            LOGGER.debug("Go to next page. Current page [{0}]", [curPage.id]);
            dispatchEvent(new GoToNextPageCommand(curPage.id));
          } else {
            LOGGER.debug("Go to next page. CanNOT find current page.");
          }
			}
			
      private function removeDecimalFromDataTip(val:String):String {			
        return val; 
      }
      
      private function showThumbnails():void{
        slideView.thumbnailView.visible = !slideView.thumbnailView.visible;
      }
      
      private function addOverlayCanvas(e:AddOverlayCanvasEvent):void{
        LOGGER.debug("OVERLAYING WHITEBOARD CANVAS");
        e.canvas.acceptOverlayCanvas(slideView);
        slideView.acceptOverlayCanvas(e.canvas);
      }
					
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				if ((slideView != null) && (!slideView.visible)) this.title = ResourceUtil.getInstance().getString('bbb.presentation.title');
				
				if (titleBarOverlay != null) {
					titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.presentation.titleBar');
				}
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.presentation.minimizeBtn.accessibilityName");

					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.presentation.maximizeRestoreBtn.accessibilityName");

					closeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.presentation.closeBtn.accessibilityName");
				}
				
				if(Capabilities.hasAccessibility)
					Accessibility.updateProperties();

				addContextMenuItems();
				
				setPollMenuData();
			}
			
			private function localeChanged(e:Event):void{
				resourcesChanged();
			}
			
			private function onFitToPage(ftp:Boolean):void {				
				fitToPage = ftp;
				slideView.switchToFitToPage(fitToPage);
				fitSlideToWindowMaintainingAspectRatio();				
			}
			
			override protected function hideAllChildren():void {
				slideView.includeInLayout=false;
			}
			
			override protected function showAllChildren():void {
				slideView.includeInLayout=true;
			}
			
			private function remoteUpload(e:ShortcutEvent):void{
				if (uploadPres.visible){
					uploadPres.setFocus();
					openUploadWindow();
				}
			}
			
			private function remotePrevious(e:ShortcutEvent):void{
				if (backButton.visible && backButton.enabled){
					//backButton.setFocus();
					gotoPreviousSlide();
				}
			}
			
			private function remoteSelect(e:ShortcutEvent):void{
				if (btnSlideNum.visible){
					btnSlideNum.setFocus();
					showThumbnails();
				}
			}
			
			private function remoteNext(e:ShortcutEvent):void{
				if (forwardButton.visible && forwardButton.enabled){
					//forwardButton.setFocus();
					gotoNextSlide();
				}
			}
			
			private function remoteWidth(e:ShortcutEvent):void{
				if (btnFitToWidth.visible){
					btnFitToWidth.setFocus();
					onFitToPage(false);
				}
			}
			
			private function remotePage(e:ShortcutEvent):void{
				if (btnFitToPage.visible){
					btnFitToPage.setFocus();
					onFitToPage(true);
				}
			}
			
			private function onUploadButtonClicked():void {
				openUploadWindow();	
			}
			
			private function openUploadWindow():void {
        if (presentOptions.openExternalFileUploadDialog) {
          var fileEvent:UploadEvent = new UploadEvent(UploadEvent.OPEN_EXTERNAL_UPLOAD_WINDOW);
          fileEvent.maxFileSize = presentOptions.maxFileSize;
          var gDispatcher:Dispatcher = new Dispatcher();
          gDispatcher.dispatchEvent(fileEvent);         
        } else {
          var event:UploadEvent = new UploadEvent(UploadEvent.OPEN_UPLOAD_WINDOW);
          event.maxFileSize = presentOptions.maxFileSize;
          dispatchEvent(event);
        }
			}
			
			private function quickPollClicked(e:MouseEvent):void {
				sendStartPollEvent(Button(e.target).name);
			}
			
			private function setPollMenuData():void {
				var resourceUtil:ResourceUtil = ResourceUtil.getInstance();
				pollMenuData = [];
				pollMenuData.push({label: resourceUtil.getString("bbb.polling.answer.Yes") + "/" + resourceUtil.getString("bbb.polling.answer.No")});
				pollMenuData.push({label: resourceUtil.getString("bbb.polling.answer.True") + "/" + resourceUtil.getString("bbb.polling.answer.False")});
				var constructedLabel:String = ResourceUtil.getInstance().getString("bbb.polling.answer."+String.fromCharCode(65));
				for (var i:int=1; i<6; i++) {
					constructedLabel += "/" + ResourceUtil.getInstance().getString("bbb.polling.answer."+String.fromCharCode(65+i));
					pollMenuData.push({label: constructedLabel});
				}
				pollMenuData.push({label: "Custom Poll..."});
			}
			
			private function onPollStartButtonClicked():void {
				openPollTypeMenu();
			}
			
			private function openPollTypeMenu():void {
				// make sure the previous menu is closed before opening a new one
				// This could be improved to include a flag that tells if the menu is open,
				// but it would require an extra listener for the MenuCloseEvent.
				if (pollMenu) {
					pollMenu.removeEventListener(MenuEvent.ITEM_CLICK, menuClickHandler);
					pollMenu.removeEventListener(MenuEvent.MENU_SHOW, menuShowHandler);
					pollMenu.hide();
				}
				
				pollMenu = Menu.createMenu(null, pollMenuData, true);
				pollMenu.addEventListener(MenuEvent.ITEM_CLICK, menuClickHandler);
				pollMenu.addEventListener(MenuEvent.MENU_SHOW, menuShowHandler);
				pollMenu.variableRowHeight = false;
				var pollXY:Point = pollStartBtn.localToGlobal(new Point(pollStartBtn.width + 2, pollStartBtn.height - pollMenu.height));
				//pollMenu.show(this.x + pollStartBtn.x + pollStartBtn.width + 2, this.y + this.height);
				pollMenu.show();

			}
			
			private function sendStartCustomPollEvent(pollType:String):void {
				// Let's reset the page to display full size so we can display the result
				// on the bottom right-corner.
				pollChoicesPopUp = PopUpManager.createPopUp(this, PollChoicesModal, true) as PollChoicesModal;
				pollChoicesPopUp.setPresentationWindow(this);
				PopUpManager.centerPopUp(pollChoicesPopUp);
			}
			
			private function sendStartPollEvent(pollType:String):void {
				// Let's reset the page to display full size so we can display the result
				// on the bottom right-corner.
				onResetZoom();
				var dispatcher:Dispatcher = new Dispatcher();
				dispatchEvent(new StartPollEvent(pollType));				
			}
			
			private function menuClickHandler(e:MenuEvent):void {
				if(pollMenuData[e.index] != undefined) {
					// start the requested poll
					switch (e.index) {
						case 0:
							sendStartPollEvent("YN");
							break;
						case 1:
							sendStartPollEvent("TF");
							break;
						case 2:
							sendStartPollEvent("A-2");
							break;
						case 3:
							sendStartPollEvent("A-3");
							break;
						case 4:
							sendStartPollEvent("A-4");
							break;
						case 5:
							sendStartPollEvent("A-5");
							break;
						case 6:
							sendStartPollEvent("A-6");
							break;
						case 7:
							sendStartCustomPollEvent("Custom");
							break;
						default:
							LOGGER.warn("Wrong poll menu selected index {0}", [e.index]);
							break;
					}

				}
			}
			
			private function menuShowHandler(e:MenuEvent):void {
				pollMenu.setFocus();
				var pollXY:Point = pollStartBtn.localToGlobal(new Point(pollStartBtn.width + 2, pollStartBtn.height - pollMenu.height));
				pollMenu.x = pollXY.x;
				pollMenu.y = pollXY.y;
			}
			
			private function pollStartedHandler(e:PollStartedEvent):void {
				// the event for this doesn't exist yet
				if (UsersUtil.amIPresenter()) {
					// display the results view
					pollResultsPopUp = PopUpManager.createPopUp(this, PollResultsModal, true) as PollResultsModal;
					pollResultsPopUp.setPoll(e.poll);
					PopUpManager.centerPopUp(pollResultsPopUp);
				} else {
					//switch to vote state
					setControlBarState("vote");
					//clear the past buttons
					pollVoteBox.removeAllChildren();
					//display the vote buttons
					var voteBtn:Button;
					var numBtns:int = e.poll.answers.length;
					var btnWidth:int = 100/numBtns;
					for (var i:int=0, ti:int=slideView.tabIndex; i<numBtns; i++) {
							voteBtn = new Button();
							voteBtn.percentWidth = btnWidth;
							voteBtn.height = 70;
							voteBtn.setStyle("fontSize", 14);
							voteBtn.tabIndex = ++ti;
							
							var localizedKey: String = ResourceUtil.getInstance().getString('bbb.polling.answer.'+e.poll.answers[i].key);

							if (localizedKey == null || localizedKey == "" || localizedKey == "undefined") {
								localizedKey = e.poll.answers[i].key;
							} 
							
							voteBtn.label = localizedKey;
							voteBtn.name = e.poll.answers[i].id;
							voteBtn.addEventListener(MouseEvent.CLICK, voteButtonClickHandler);
							pollVoteBox.addChild(voteBtn);
					}
					
					var tSC:SoundChannel = noticeSound.play(0, 0, new SoundTransform(0.25));
				}
			}
			
			private function voteButtonClickHandler(e:MouseEvent):void {
				//still have to figure out how to determine which button was pressed
				LOGGER.debug("vote clicked - answer is {0}", [e.target.name]);
				setControlBarState("presenter");
				dispatchEvent(new VotePollEvent(Number(e.target.name)));
			}
			
			private function setControlBarState(state:String):void {
				if (state == "vote") {
					presenterControls.visible = false;
					presenterControls.includeInLayout = false;
					pollVoteBox.visible = true;
					pollVoteBox.includeInLayout = true;
				} else if (state == "presenter" && UsersUtil.amIPresenter()) {
					presenterControls.visible = true;
					presenterControls.includeInLayout = true;
					pollVoteBox.visible = false;
					pollVoteBox.includeInLayout = false;
				} else {
					presenterControls.visible = false;
					presenterControls.includeInLayout = false;
					pollVoteBox.visible = false;
					pollVoteBox.includeInLayout = false;
				}
				
				// Need to call the function later because the heights haven't been validated yet
				callLater(fitSlideToWindowMaintainingAspectRatio);
			}
			
			private function pollStoppedHandler(e:PollStoppedEvent):void {
				setControlBarState("presenter");
				PopUpManager.removePopUp(pollResultsPopUp);
			}
			
			private function pollShowResultHandler(e:PollShowResultEvent):void {
				setControlBarState("presenter");
			}

		]]>
	</mx:Script>
	
	<pres:TabIndexer startIndex="{presentOptions.baseTabIndex + 1}"
					 tabIndices="{[minimizeBtn, maximizeRestoreBtn, closeBtn, slideView.slideLoader, uploadPres, pollStartBtn, quickPollBtn, backButton, btnSlideNum, forwardButton, zoomSlider, btnFitToWidth, btnFitToPage]}"/>
  	 
	<mx:Fade id="thumbFadeIn" alphaFrom="1" alphaTo="0" duration="100" />
	<mx:Fade id="thumbFadeOut" alphaFrom="0" alphaTo="1" duration="100" />

	<views:SlideView id="slideView" width="100%" height="100%" visible="false" mouseDown="mouseDown = true"
		mouseUp="mouseDown = false" verticalScrollPolicy="off" horizontalScrollPolicy="off"/>			    
	<mx:ControlBar id="presCtrlBar" name="presCtrlBar" width="100%" verticalAlign="middle" styleName="presentationWindowControlsStyle" 
				   paddingTop="2" paddingBottom="2">
		<mx:HBox id="presenterControls" width="100%" height="100%" visible="false" includeInLayout="false" horizontalAlign="center">
			<mx:Button id="uploadPres" visible="false" height="30" styleName="presentationUploadButtonStyle"
					   toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.uploadPresBtn.toolTip')}" 
					   click="onUploadButtonClicked()"/>
			<mx:Button id="pollStartBtn" visible="false" height="30" styleName="pollStartButtonStyle"
					   toolTip="{ResourceUtil.getInstance().getString('bbb.polling.startButton.tooltip')}" 
					   click="onPollStartButtonClicked()"/>
			<poll:QuickPollButton id="quickPollBtn" height="30"
								  click="quickPollClicked(event)" />
			<mx:Spacer width="100%" id="spacer1"/>
			<mx:Button id="backButton" visible="false" width="45" height="30" styleName="presentationBackButtonStyle"
					   toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.backBtn.toolTip')}" click="gotoPreviousSlide()"/>
			<mx:Button id="btnSlideNum" visible="false" label="" click="showThumbnails()"
					   toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.btnSlideNum.toolTip')}"/>
			<mx:Button id="forwardButton" visible="false" width="45" height="30" styleName="presentationForwardButtonStyle"
					   toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.forwardBtn.toolTip')}" click="gotoNextSlide()"/>    				
			<mx:Spacer width="50%" id="spacer3"/>
			<mx:HSlider id="zoomSlider" visible="false" value="{slideView.zoomPercentage}" styleName="presentationZoomSliderStyle"
						minimum="100" maximum="400" dataTipPlacement="top" labels="['100%','400%']" 
						useHandCursor="true" snapInterval="5" allowTrackClick="true" liveDragging="true" 
						dataTipFormatFunction="removeDecimalFromDataTip" change="onSliderZoom()" width="100"
						accessibilityName="{ResourceUtil.getInstance().getString('bbb.presentation.slider')}"/>
			<mx:Button id="btnFitToWidth" visible="false" width="30" height="30" styleName="presentationFitToWidthButtonStyle"
					   toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.fitToWidth.toolTip')}" 
					   click="onFitToPage(false)"/>
			<mx:Button id="btnFitToPage" visible="false" width="30" height="30" styleName="presentationFitToPageButtonStyle"
					   toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.fitToPage.toolTip')}" 
					   click="onFitToPage(true)"/>
			<!-- This spacer is to prevent the whiteboard toolbar from overlapping the fit-ot-page button -->
			<mx:Spacer width="30" height="30" id="spacer4"/>
		</mx:HBox>
		<mx:HBox id="pollVoteBox" width="100%" height="100%" visible="false" includeInLayout="false" horizontalAlign="center" />
    </mx:ControlBar>
</pres:CustomMdiWindow>
