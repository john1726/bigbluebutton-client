<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:ApplicationControlBar xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/" xmlns:common="org.bigbluebutton.common.*"
	xmlns:views="org.bigbluebutton.main.views.*"
	enabled="true" visible="{showToolbar}"
	initialize="init()" creationComplete="onCreationComplete()">   
	
	<mate:Listener type="{ToolbarButtonEvent.ADD}" method="handleAddToolbarButtonEvent" />	
	<mate:Listener type="{ToolbarButtonEvent.REMOVE}" method="handleRemoveToolbarButtonEvent"/>
	<mate:Listener type="{BBBEvent.END_MEETING_EVENT}" method="handleEndMeetingEvent"/>
	<mate:Listener type="{ConnectionFailedEvent.USER_LOGGED_OUT}" method="hideToolbar" />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_CLOSED}" method="hideToolbar" />
	<mate:Listener type="{ConfigEvent.CONFIG_EVENT}" method="gotConfigParameters" />
	<mate:Listener type="{SettingsEvent.SETTINGS_MODULE_LOADED}" method="showSettingsButton" />
	<mate:Listener type="{ShortcutEvent.REMOTE_OPEN_SHORTCUT_WIN}" method="remoteShortcutClick" />
	<mate:Listener type="{ShortcutEvent.LOGOUT}" method="remoteLogout" />
	<mate:Listener type="{ShortcutEvent.FOCUS_SHORTCUT_BUTTON}" method="focusShortcutButton" />
	<mate:Listener type="{ShortcutEvent.FOCUS_LOGOUT_BUTTON}" method="focusLogoutButton" />
	<mate:Listener type="{ConferenceCreatedEvent.CONFERENCE_CREATED_EVENT}" method="retrieveMeetingName" />
  <mate:Listener type="{BBBEvent.CHANGE_RECORDING_STATUS}" method="onRecordingStatusChanged" />
  
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.accessibility.AlertAccImpl;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbToolbarComponent;
			import org.bigbluebutton.common.events.ToolbarButtonEvent;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ConfigEvent;
			import org.bigbluebutton.main.events.LogoutEvent;
			import org.bigbluebutton.main.events.SettingsEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.model.LayoutOptions;
			import org.bigbluebutton.main.model.users.events.ConferenceCreatedEvent;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(MainToolbar);

			private var DEFAULT_HELP_URL:String = "http://www.bigbluebutton.org/content/videos";
			
			public static const ALIGN_RIGHT:String ="ALIGN_RIGHT";
			public static const ALIGN_LEFT:String = "ALIGN_LEFT";
			
			[Bindable] private var showHelpBtn:Boolean = false;
			[Bindable] private var showToolbar:Boolean = false;
			[Bindable] public var toolbarOptions:LayoutOptions = new LayoutOptions();		
			[Bindable] private var numButtons:int;
      
			/*
			 * Because of the de-centralized way buttons are added to the toolbar, there is a large gap between the tab indexes of the main buttons
			 * on the left and the tab indexes of the "other" items on the right (shortcut glossary, language slector, etc). This will make it more
			 * convenient to add future items to the tab order.
			 * 
			 * - Justin Robinson, November 13 2012 
			 */
			
			private var xml:XML;
			
			private function init():void{
				if (Capabilities.hasAccessibility) {
					AlertAccImpl.enableAccessibility();
				}
				
				numButtons = 0;
                
                // Accessibility isn't active till a few second after the client starts to load so we need a delay
                var timer:Timer = new Timer(3000, 1);
                timer.addEventListener(TimerEvent.TIMER, checkAccessiblity);
                timer.start();

			}
      
      private function onCreationComplete():void {
      }
      
      private function checkAccessiblity(e:TimerEvent):void {
        // remove the quick links if there's no screen reader active
        if (!Accessibility.active) {
          quickLinks.removeAllChildren();
        }
      }
      
      private function onQuickLinkClicked(window:String):void {
        var dispatcher:Dispatcher = new Dispatcher();
        switch(window) {
          case "users":
            dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_USERS_WINDOW));
            break;
          case "webcams":
            dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_VIDEO_WINDOW));
            break;
          case "presentation":
            dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_PRESENTATION_WINDOW));
            break;
          case "chat":
            dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_CHAT_WINDOW));
            break;
         }
       }
								
			public function displayToolbar():void{
				toolbarOptions = new LayoutOptions();
				toolbarOptions.parseOptions();	
				if (toolbarOptions.showToolbar) {
					showToolbar = true;
				} else {
					showToolbar = false;
				}
				
				if (toolbarOptions.showHelpButton) {
					showHelpBtn = true;
				} else {
					showHelpBtn = false;
				}
			}
			
      private function retrieveMeetingName(e:ConferenceCreatedEvent):void {
         if (toolbarOptions.showMeetingName) {
              var meetingTitle:String = BBB.initUserConfigManager().getMeetingTitle();                   
              if (meetingTitle != null) {
                  meetingNameLbl.text = meetingTitle;
                  meetingNameLbl.toolTip = meetingTitle;
               } 
          }
          logFlashPlayerCapabilities();
      }

      private function getFlashPlayerCapabilities():Object {
          var caps:Object = new Object();
          caps.avHardwareDisable = Capabilities.avHardwareDisable;
          caps.hasAccessibility = Capabilities.hasAccessibility;
          caps.hasAudio = Capabilities.hasAudio;
          caps.hasAudioEncoder = Capabilities.hasAudioEncoder;
          caps.hasEmbeddedVideo = Capabilities.hasEmbeddedVideo;
          caps.hasIME = Capabilities.hasIME;
          caps.hasMP3 = Capabilities.hasMP3;
          caps.hasPrinting = Capabilities.hasPrinting;
          caps.hasScreenBroadcast = Capabilities.hasScreenBroadcast;
          caps.hasScreenPlayback = Capabilities.hasScreenPlayback;
          caps.hasStreamingAudio = Capabilities.hasStreamingAudio;
          caps.hasStreamingVideo = Capabilities.hasStreamingVideo;
          caps.hasTLS = Capabilities.hasTLS;
          caps.hasVideoEncoder = Capabilities.hasVideoEncoder;
          caps.isDebugger = Capabilities.isDebugger;
          caps.isEmbeddedInAcrobat = Capabilities.isEmbeddedInAcrobat;
          caps.language = Capabilities.language;
          caps.localFileReadDisable = Capabilities.localFileReadDisable;
          caps.manufacturer = Capabilities.manufacturer;
          caps.maxLevelIDC = Capabilities.maxLevelIDC;
          caps.os = Capabilities.os;
          caps.pixelAspectRatio = Capabilities.pixelAspectRatio;
          caps.playerType = Capabilities.playerType;
          caps.screenColor = Capabilities.screenColor;
          caps.screenDPI = Capabilities.screenDPI;
          caps.screenResolutionX = Capabilities.screenResolutionX;
          caps.screenResolutionY = Capabilities.screenResolutionY;
          //caps.serverString = Capabilities.serverString;
          caps.touchscreenType = Capabilities.touchscreenType;
          caps.version = Capabilities.version;
          return caps;
     }

     private function logFlashPlayerCapabilities():void {
         var logData:Object = new Object();
         logData.user = UsersUtil.getUserData();
         logData.capabilities = getFlashPlayerCapabilities();
         logData.message = "Flash Player Capabilities.";
         LOGGER.info(JSON.stringify(logData));
     }

            
			public function addButton(name:String):Button{
				var btn:Button = new Button();
				btn.id = name;
				btn.label = name;
				btn.height = 20;
				btn.visible = true;
				this.addChild(btn);
				
				return btn;
			}
			
			private function onHelpButtonClicked():void {
        DEFAULT_HELP_URL = BBB.initConfigManager().config.help.url;        
				navigateToURL(new URLRequest(DEFAULT_HELP_URL))
			}
			
			private function handleEndMeetingEvent(event:BBBEvent):void {
				LOGGER.debug("Received end meeting event.");
				doLogout();
			}
			
			
			private function confirmLogout():void {
				if (toolbarOptions.confirmLogout){
					// Confirm logout using built-in alert
					var alert:Alert = Alert.show(ResourceUtil.getInstance().getString('bbb.logout.confirm.message'), ResourceUtil.getInstance().getString('bbb.logout.confirm.title'), Alert.YES | Alert.NO, this, alertLogout, null, Alert.YES);
					
          var newX:Number = btnLogout.x + btnLogout.width - alert.width;
					var newY:Number = btnLogout.y + btnLogout.height + 5;
												
					alert.validateNow();
					alert.move(newX, newY);
					//Accessibility.updateProperties();
				}
				else{
					doLogout();
				}
			}
			
						
			private function alertLogout(e:CloseEvent):void {
				// Check to see if the YES button was pressed.
				if (e.detail==Alert.YES) {
					 doLogout();
				}
			}
			
			private function doLogout():void {
				dispatchEvent(new LogoutEvent(LogoutEvent.USER_LOGGED_OUT));
			}
			
			private function hideToolbar(e:ConnectionFailedEvent):void{
				if (toolbarOptions.showToolbar) {
					this.visible = false;
				} else {
					this.visible = true;
				}
			}
			
			private function handleAddToolbarButtonEvent(event:ToolbarButtonEvent):void {
				// Find out how to import accessibility into custom components; even though the ToolbarButtons are buttons, they don't seem to have a tabIndex
				if (event.location == ToolbarButtonEvent.TOP_TOOLBAR) {
					var index:int;
					var added:int = 0;
					//*var localButton:UIComponent;
					if (event.module == "DeskShare"){
						index = 0;
					}
					else if (event.module == "Microphone"){
						index = 1;
					}
					else if (event.module == "Webcam"){
						index = 2;
					}
					
					//localButton = event.button as UIComponent;
					//(localButton as Button).tabIndex = baseIndex + numButtons;
					//addedBtns.addChild(localButton);*/
					
					
					addedBtns.addChild(event.button as UIComponent);
					// Won't work quite like this: addedBtns.addChildAt(event.button as UIComponent, index);					
					numButtons++;
					realignButtons();
				}
			}
			
			private function handleRemoveToolbarButtonEvent(event:ToolbarButtonEvent):void {
				if (addedBtns.contains(event.button as UIComponent))
					addedBtns.removeChild(event.button as UIComponent);
			}
			
			private function realignButtons():void{
				for each (var button:UIComponent in addedBtns.getChildren()){
					var toolbarComponent:IBbbToolbarComponent = button as IBbbToolbarComponent;
					
					/*if (toolbarComponent.getAlignment() == ALIGN_LEFT){ 
						addedBtns.setChildIndex(button, 0);
						//(addedBtns.getChildAt(0) as Button).tabIndex = 0;
					}
					else if (toolbarComponent.getAlignment() == ALIGN_RIGHT){ 
						addedBtns.setChildIndex(button, addedBtns.numChildren - 1);
						//(addedBtns.getChildAt(0) as Button).tabIndex = addedBtns.numChildren - 1;
					}*/
					button.tabIndex = quickLinksIndexer.startIndex + 5;
					//for (var i:int = 0; i < addedBtns.numChildren; i++){
					//	(addedBtns.getChildAt(i) as Button).tabIndex = baseIndex + i;
					//}
				}
			}
						
			private function gotConfigParameters(e:ConfigEvent):void{
				shortcutKeysBtn.includeInLayout = shortcutKeysBtn.visible = e.config.shortcutKeysShowButton; 
				DEFAULT_HELP_URL = e.config.helpURL;
			}
			
			private function onDisconnectTest():void{
				var d:Dispatcher = new Dispatcher();
				var e:LogoutEvent = new LogoutEvent(LogoutEvent.DISCONNECT_TEST);
				d.dispatchEvent(e);
			}
			
			private function showSettingsButton(e:SettingsEvent):void{
				var b:Button = new Button();
				b.label = ResourceUtil.getInstance().getString('bbb.mainToolbar.settingsBtn');
				b.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.settingsBtn.toolTip');
				b.addEventListener(MouseEvent.CLICK, openSettings);
				this.addChild(b);
			}
			
			private function openSettings(e:Event = null):void{
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(new SettingsEvent(SettingsEvent.OPEN_SETTINGS_PANEL));
			}
			
			public function remoteShortcutClick(e:ShortcutEvent):void{
				onShortcutButtonClick();
			}
			
			public function remoteLogout(e:ShortcutEvent):void{
				confirmLogout();
			}
			
			private function onShortcutButtonClick(e:Event = null):void {
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(new ShortcutEvent(ShortcutEvent.OPEN_SHORTCUT_WIN));
			}
			
			private function focusShortcutButton(e:ShortcutEvent):void{
				shortcutKeysBtn.setFocus();
			}
			
			private function focusLogoutButton(e:ShortcutEvent):void{
				btnLogout.setFocus();
			}
      
      private function onRecordingStatusChanged(event:BBBEvent):void {
        meetingNameLbl.text = "";
        
        if (event.payload.recording) {
          meetingNameLbl.text =  ResourceUtil.getInstance().getString('bbb.mainToolbar.recordingLabel.recording')
		}
        
        if (toolbarOptions.showMeetingName) {
          var meetingTitle:String = BBB.initUserConfigManager().getMeetingTitle();                   
          if (meetingTitle != null) {
            meetingNameLbl.text += " " + meetingTitle;
          } 
        }
      }

		]]>
	</mx:Script>
	
	<common:TabIndexer id="quickLinksIndexer" startIndex="102" tabIndices="{[usersLinkBtn, webcamLinkButton, presentationLinkBtn, chatLinkBtn]}"/>
	<common:TabIndexer id="buttonsIndexer" startIndex="{quickLinksIndexer.startIndex + numButtons + 10}"
					   tabIndices="{[recordBtn, muteMeBtn, shortcutKeysBtn, helpBtn, btnLogout]}"/>

    
    <mx:HBox id="quickLinks" width="1" includeInLayout="false">
        <mx:LinkButton id="usersLinkBtn" click="onQuickLinkClicked('users')" label="{ResourceUtil.getInstance().getString('bbb.users.quickLink.label')}"
                       accessibilityDescription="{usersLinkBtn.label}" toolTip="{usersLinkBtn.label}"
                       height="22" styleName="quickWindowLinkStyle" />
        <mx:LinkButton id="webcamLinkButton" click="onQuickLinkClicked('webcams')" label="{ResourceUtil.getInstance().getString('bbb.videodock.quickLink.label')}" 
                       accessibilityDescription="{webcamLinkButton.label}" toolTip="{webcamLinkButton.label}"
                       height="22" styleName="quickWindowLinkStyle" />
        <mx:LinkButton id="presentationLinkBtn" click="onQuickLinkClicked('presentation')" label="{ResourceUtil.getInstance().getString('bbb.presentation.quickLink.label')}"
                       accessibilityDescription="{presentationLinkBtn.label}" toolTip="{presentationLinkBtn.label}"
                       height="22" styleName="quickWindowLinkStyle" />
        <mx:LinkButton id="chatLinkBtn" click="onQuickLinkClicked('chat')" label="{ResourceUtil.getInstance().getString('bbb.chat.quickLink.label')}" 
                       accessibilityDescription="{chatLinkBtn.label}" toolTip="{chatLinkBtn.label}"
                       height="22" styleName="quickWindowLinkStyle" />
    </mx:HBox>
	<mx:HBox id="addedBtns"/>
	<views:RecordButton id="recordBtn"/>
	<mx:VRule strokeWidth="2" height="100%" visible="{muteMeBtn.visible}" includeInLayout="{muteMeBtn.includeInLayout}"/>
	<views:MuteMeButton id="muteMeBtn"  height="20"/>
	<mx:Label id="meetingNameLbl" width="100%" minWidth="1" styleName="meetingNameLabelStyle" />

<!--
  <mx:Button label="DISCONNECT!" click="BBB.initConnectionManager().forceClose()" height="22" toolTip="Click to simulate disconnection" />
-->
	<mx:Button id="shortcutKeysBtn" label="{ResourceUtil.getInstance().getString('bbb.mainToolbar.shortcutBtn')}" styleName="shortcutButtonStyle"
             click="onShortcutButtonClick()" height="22" 
             toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.shortcutBtn.toolTip')}"/>
	<mx:LinkButton id="helpBtn" visible="{showHelpBtn}" includeInLayout="{showHelpBtn}" label="?" click="onHelpButtonClicked()" height="22" 
                   styleName="helpLinkButtonStyle"
                   toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.helpBtn')}"
				   accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.access.helpButton')}"/>
	<mx:Button label="" id="btnLogout" styleName="logoutButtonStyle"
                 toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.logoutBtn.toolTip')}" right="10" click="confirmLogout()" height="22"/>
</mx:ApplicationControlBar>
