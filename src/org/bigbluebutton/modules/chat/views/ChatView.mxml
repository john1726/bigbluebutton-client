<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:mate="http://mate.asfusion.com/"
    creationComplete="onCreationComplete()"
    initialize="init()"
    xmlns:flexlib="http://code.google.com/p/flexlib/"
    width="100%" height="100%" xmlns:containers="flexlib.containers.*"
    verticalScrollPolicy="off" xmlns:common="org.bigbluebutton.common.*">

  <mate:Listener type="{PrivateChatMessageEvent.PRIVATE_CHAT_MESSAGE_EVENT}" method="handlePrivateChatMessageEvent"/>
  <mate:Listener type="{PublicChatMessageEvent.PUBLIC_CHAT_MESSAGE_EVENT}" method="handlePublicChatMessageEvent"/>
  <mate:Listener type="{EventConstants.START_PRIVATE_CHAT}" method="handleStartPrivateChatMessageEvent"/>
  <mate:Listener type="{ShortcutEvent.FOCUS_CHAT_TABS}" method="focusChatTabs" />
  <mate:Listener type="{ShortcutEvent.CLOSE_PRIVATE}" method="remoteClosePrivate" />
  
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.accessibility.Accessibility;
			import flash.events.Event;
			import flash.events.FocusEvent;
			import flash.media.Sound;
			
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.SuperTabEvent;
			
			import mx.controls.Button;
			import mx.core.INavigatorContent;
			
			import org.bigbluebutton.core.EventConstants;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.events.CoreEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.modules.chat.events.ChatNoiseEnabledEvent;
			import org.bigbluebutton.modules.chat.events.PrivateChatMessageEvent;
			import org.bigbluebutton.modules.chat.events.PublicChatMessageEvent;
			import org.bigbluebutton.modules.chat.model.ChatOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;			
					
	    private static const PUBLIC_CHAT_USERID:String = 'public_chat_userid';
	    private var PUBLIC_CHAT_USERNAME:String = ResourceUtil.getInstance().getString("bbb.chat.publicChatUsername");
	    private var OPTION_TAB_ID:String = ResourceUtil.getInstance().getString("bbb.chat.optionsTabName");
	    private var tabBox:AddChatTabBox;
	    private var publicBox:ChatBox;
	    private var focus:Boolean = true;
	    private var focusSwitchTimer:Timer;
	    private var globalDispatcher:Dispatcher = new Dispatcher();
			
      [Bindable] public var chatOptions:ChatOptions;
	  
		  private static const PUBLIC_TAB_NEW:String = ResourceUtil.getInstance().getString("bbb.accessibility.chat.chatView.publicTabNew");
		  private var publicWaiting:Boolean = false;
		  private var publicFocus:Boolean = false;
		  private var noticeLabel:String;
		  private var chatNoiseEnabled:Boolean = false;
			
		  [Embed(source="../sounds/notice.mp3")] 
		  private var noticeSoundClass:Class;
		  private var noticeSound:Sound = new noticeSoundClass() as Sound;
		  // All author and license information for the use of this sound can be found in:
		  // src/org/bigbluebutton/modules/chat/sounds/license.txt

			// Initialization
			private function init():void {
				chatOptions = new ChatOptions();
				noticeLabel = ResourceUtil.getInstance().getString('bbb.chat.chatTabs.accessibleNotice');
				// Get the base tab index from config, and add four to make up for the min/max/close buttons and title overlay
			}
			

			private function onCreationComplete():void{				
				openChatBoxFor(PUBLIC_CHAT_USERID, true);
				makePublicChatUncloseable();
				
				createAddTabBox();
				makeAddPrivateChatUncloseable();
				
				ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
				
				addEventListener(SuperTabEvent.TAB_CLOSE, onUserClosedTab);
				addEventListener(ChatNoiseEnabledEvent.CHAT_NOISE_CHANGE_EVENT, onChatNoiseChangeEvent);
				
				systemManager.stage.addEventListener(Event.MOUSE_LEAVE, mouseLeave);
				systemManager.stage.addEventListener(Event.ACTIVATE, activate);
				systemManager.stage.addEventListener(Event.DEACTIVATE, deactivate);
			}       
			
			private function focusChatTabs(e:ShortcutEvent):void{
				focusManager.setFocus(chatTabs);
			}
			
			private function localeChanged(e:Event):void{
				setTabTitles();
			}
			
			private function setTabTitles():void {
				PUBLIC_CHAT_USERNAME = ResourceUtil.getInstance().getString("bbb.chat.publicChatUsername");
				OPTION_TAB_ID = ResourceUtil.getInstance().getString("bbb.chat.optionsTabName");				
				
				if (tabBox != null) {
					tabBox.id = OPTION_TAB_ID;
					tabBox.label = OPTION_TAB_ID;
					tabBox.name = OPTION_TAB_ID;
				}
				
				if (publicBox != null) {
					publicBox.label = PUBLIC_CHAT_USERNAME;
				}
			}
			
		  private function handlePublicChatMessageEvent(event:PublicChatMessageEvent):void {
			  notifyUserOfNewMessage(PUBLIC_CHAT_USERID);
			  if (!UsersUtil.isMe(event.message.fromUserID)) {
          publicNotification();
        }			
      }
      
		  private function handlePrivateChatMessageEvent(event:PrivateChatMessageEvent):void {
		    // This message is from me. Ignore as a chatbox has already been created for this
			  // private chat and that chatbox will handle this message.
			  if (UsersUtil.isMe(event.message.fromUserID)) return;
			
			  // I received a new private chat. Open up a new chatbox and forward the message
			  // to the chatbox. Succeeding messages will be handled by that chatbox.
			  if (! userHasChatBox(event.message.fromUserID)) {
			  	// Open a private chat tab.
			  	openChatBoxFor(event.message.fromUserID, false).handleFirstPrivateMessage(event);         
			  }
			
			  // See if the chatbox is not in focus and notify user about the message.
			  notifyUserOfNewMessage(event.message.fromUserID);
			  privateNotification(event);
	 	  }
      
      private function notifyUserOfNewMessage(userID:String):void {
        if (! isChatBoxCurrentlySelected(userID)) {
        	notifyParticipantOfUnreadMessageFrom(userID);
        }
      }
      		
			private function mouseLeave(event:Event):void{
				this.focus = false;
			}
			
			private function activate(event:Event):void{
				this.focus = true;
			}
			
			private function deactivate(event:Event):void{
				this.focus = false;
			}
					
			private function makePublicChatUncloseable():void {
				// See definition of callLater on Adobe Flash doc.
				callLater(calledOnTheNextScreenRefreshToMakePublicChatUncloseable);
			}
			
      private function makeAddPrivateChatUncloseable():void {
        // See definition of callLater on Adobe Flash doc.
        callLater(calledOnTheNextScreenRefreshToMakeTabUncloseable);        
      }      
      
      private function calledOnTheNextScreenRefreshToMakeTabUncloseable():void {
        chatTabs.setClosePolicyForTab(chatTabs.getChildIndex(tabBox), SuperTab.CLOSE_NEVER);
      }
      
			private function calledOnTheNextScreenRefreshToMakePublicChatUncloseable():void {
				var chatBox:ChatBox = getChatBoxForUser(PUBLIC_CHAT_USERID);
				var chatIndex:int = getTabIndexFor(chatBox);
				chatTabs.setClosePolicyForTab(chatIndex, SuperTab.CLOSE_NEVER);								
			}
											
			private function isChatBoxCurrentlySelected(id:String):Boolean {
				if (chatTabs.getChildByName(id) == chatTabs.selectedChild){
					return true;
				}
				return false;
			}
								
			private function notifyParticipantOfUnreadMessageFrom(userid:String):void {
				var chatBox:ChatBox = getChatBoxForUser(userid);
				var tabIndex:int = getTabIndexFor(chatBox);
				var tab:Button = chatTabs.getTabAt(tabIndex);
				tab.setStyle("fillColors", new Array(0xFFAE00, 0xD3800A));
				tab.setStyle("fillAlphas", new Array(1.0, 0.8));
				
				// An event to change the accessibilityDescription of the given chat tab to <existing label> + "NEW MESSAGE" should go here.
				// However, the SuperTabNavigator does not cooperate with changes to it's accessibility properties.
			}
			
			private function getTabIndexFor(chatBox:ChatBox):int {
				return chatTabs.getChildIndex(chatBox);
			}
			
			private function onTabNavChange():void{
				var tab:Button = chatTabs.getTabAt(chatTabs.selectedIndex);
				tab.setStyle("fillColors", new Array(0xFFFFFF, 0xCCCCCC));
				
				// An event to remove the "NEW MESSAGE" notification from the accessibilityDescription of the given chat tab (if it exists) should go here.
				// However, the SuperTabNavigator does not cooperate with changes to it's accessibility properties.
				var chatBox:IChatTab = chatTabs.getChildAt(chatTabs.selectedIndex) as IChatTab;
				// When the tab is switched we want to autofocus to the area that we likely want to immediately interact with, 
				// but if we move focus immediately the tab's contents aren't actually visible on the screen. This results in 
				// a screen reader not recognizing the focus shift. We need to delay the focus change for a couple of frames, 
				// but there isn't a good event to listen for so a short Timer was used instead.
				focusSwitchTimer = new Timer(250, 1);
				focusSwitchTimer.addEventListener(TimerEvent.TIMER, function():void {
					chatBox.focusToTextMessageArea();
				});
				focusSwitchTimer.start();
			}
								
		  private function userHasChatBox(userID:String):Boolean {
		    var chatBox:ChatBox = chatTabs.getChildByName(userID) as ChatBox;
		    if (chatBox != null) return true;
		    return false;
		  }
		      
		  private function getChatBoxForUser(userID:String):ChatBox {
		    return chatTabs.getChildByName(userID) as ChatBox;
		  }
		      
		  private function handleStartPrivateChatMessageEvent(event:CoreEvent):void {
		    var userID:String = event.message.chatWith;
		    var tabIndex:int = getTabIndexFor(openChatBoxFor(userID));
		    chatTabs.selectedIndex = tabIndex;
		  }
      
			public function openChatBoxFor(chatWithUserID:String, publicChat:Boolean=false):ChatBox {
				if (userHasChatBox(chatWithUserID)) {
					return getChatBoxForUser(chatWithUserID);
				} else {
					return createChatBoxFor(chatWithUserID, publicChat);
				}				
			}
			
			private function createChatBoxFor(chatWithUserID:String, publicChat:Boolean=false):ChatBox {				
				var chatBox:ChatBox = new ChatBox();
				chatBox.id = chatWithUserID;
		    chatBox.name = chatWithUserID;
				chatBox.chatWithUserID = chatWithUserID;
				chatBox.tabIndexer.startIndex = tabIndexer.startIndex + 10;
		        
		    if (publicChat) {
		      chatBox.label = PUBLIC_CHAT_USERNAME
		      chatBox.publicChat = true;
				  publicBox = chatBox; // keep a reference to the public chat box
		    } else {
		      chatBox.publicChat = false;
		      chatBox.label = UsersUtil.getUserName(chatWithUserID);
		      chatBox.displayHowToCloseMessage();
		    }
				
				chatBox.chatWithUsername = UsersUtil.getUserName(chatWithUserID);
				
				if (chatTabs.numChildren >= 2) { 
					chatTabs.addChildAt(chatBox, chatTabs.numChildren - 1);
				} else {
					chatTabs.addChild(chatBox);
				}
         
				// set the font size on tab opening
				if (tabBox) chatBox.setStyle("fontSize", int(tabBox.cmbFontSize.selectedItem));
				
				return chatBox;
			}
			     
			private function createAddTabBox():AddChatTabBox {
				tabBox = new AddChatTabBox();
				tabBox.chatView = this;
				tabBox.id = OPTION_TAB_ID;
				tabBox.label = OPTION_TAB_ID;
				tabBox.name = OPTION_TAB_ID;
				tabBox.chatOptions = chatOptions;
				tabBox.tabIndexer.startIndex = tabIndexer.startIndex + 10;
				tabBox.addEventListener(KeyboardEvent.KEY_DOWN, tabBox.accessibleClick);
				chatTabs.addChild(tabBox);
				
				return tabBox;
			}
			
			
			// Activates an audio alert for screen-reader users on public message reception
			private function publicNotification():void {
				publicWaiting = true;
				playSound();
				chatTabs.getChildByName(PUBLIC_CHAT_USERID).addEventListener(FocusEvent.FOCUS_IN, publicChatFocus);
				chatTabs.getChildByName(PUBLIC_CHAT_USERID).addEventListener(FocusEvent.FOCUS_OUT, publicChatUnfocus);
			}
			
			// Activates an audio alert for screen-reader users on private message reception
			private function privateNotification(event:PrivateChatMessageEvent):void{
				if (! UsersUtil.isMe(event.message.fromUserID)) {
					playSound();
				}
			}
			
			private function playSound():void {
				if (chatNoiseEnabled){
					noticeSound.play(0, 0, new SoundTransform(0.3));
				}
			}
			
			private function onChatNoiseChangeEvent(e:ChatNoiseEnabledEvent):void {
				chatNoiseEnabled = e.enabled;
			}
			
			public function publicChatFocus(event:FocusEvent):void{
				publicFocus = true;					
				publicWaiting = false;
			}
					
			public function publicChatUnfocus(event:FocusEvent):void {
				publicFocus = false;
			}
										
			private function focusPreviousChatTab(e:ShortcutEvent):void{
				if (chatTabs.selectedIndex > 0){
					chatTabs.selectedIndex--;
				}
				else{
					chatTabs.selectedIndex = chatTabs.numChildren - 1;
				}				
			}
			
			private function focusNextChatTab(e:ShortcutEvent):void{
				if (chatTabs.selectedIndex < chatTabs.numChildren - 1){
					chatTabs.selectedIndex++;
				}
				else{
					chatTabs.selectedIndex = 0;
				}
			}
			          		
			private function onTabClose(e:SuperTabEvent):void{
				dispatchEvent(e);
			}
			
			private function onUserClosedTab(e:SuperTabEvent):void{
				var name:String = chatTabs.getChildAt(e.tabIndex).name;
			}
			
			private function remoteClosePrivate(e:ShortcutEvent):void {
				var selectedTab:INavigatorContent = chatTabs.selectedChild;
				if (selectedTab is ChatBox && !(selectedTab as ChatBox).publicChat) {
					chatTabs.removeChild(selectedTab as DisplayObject);
				}
			}
			
		]]>
	</mx:Script>
	
	<common:TabIndexer id="tabIndexer" startIndex="{chatOptions.getBaseIndex() + 4}" tabIndices="{[chatTabs]}"/>
	
	<containers:SuperTabNavigator includeInLayout="false" id="chatTabs" 
                                width="100%" height="100%" change="onTabNavChange()" 
                                tabClose="onTabClose(event)" minTabWidth="20"
								  dragEnabled="false" popUpButtonPolicy="off"
								  />
</mx:VBox>
