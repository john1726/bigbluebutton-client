<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:PopUpButton xmlns:mx="http://www.adobe.com/2006/mxml" styleName="webcamDefaultButtonStyle"
		   xmlns:mate="http://mate.asfusion.com/"
		   click="openPublishWindow()" creationComplete="init()" 
		   mouseOver = "mouseOverHandler(event)"
		   mouseOut = "mouseOutHandler(event)"
           height="24"
		   toolTip="{_currentState == ON_STATE ? ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.stop') : ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.start')}"
		   visible="false"
		   enabled="true"
		   implements="org.bigbluebutton.common.IBbbToolbarComponent">

	<mate:Listener type="{ShortcutEvent.SHARE_WEBCAM}" method="remoteClick" />
	<mate:Listener type="{BBBEvent.CAM_SETTINGS_CLOSED}" method="handleCamSettingsClosedEvent"/>
	<mate:Listener type="{ShareCameraRequestEvent.SHARE_CAMERA_REQUEST}" receive="enabled=false" />
	<mate:Listener type="{LockControlEvent.CHANGED_LOCK_SETTINGS}" method="lockSettingsChanged" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.controls.Menu;
			import mx.events.MenuEvent;
			import mx.styles.IStyleManager2;
			import mx.styles.StyleManager;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.Media;
			import org.bigbluebutton.core.events.LockControlEvent;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.model.users.BBBUser;
			import org.bigbluebutton.main.model.users.Conference;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.modules.videoconf.events.ShareCameraRequestEvent;
			import org.bigbluebutton.modules.videoconf.events.StopShareCameraRequestEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(ToolbarPopupButton);      

			public const OFF_STATE:Number = 0;
			public const ON_STATE:Number = 1;
			
			public const STOP_PUBLISHING:Number = 0;
			public const START_PUBLISHING:Number = 1;

			[Bindable]
			private var _currentState:Number = OFF_STATE;

			private var dp:Object = [];
			private var dataMenu:Menu;
			public var numberOfCamerasOff:int = 0;

			private var dispatcher:Dispatcher;

			public function lockSettingsChanged(e:*):void{
				var userManager:UserManager = UserManager.getInstance();
				var conference:Conference = userManager.getConference();
				var me:BBBUser = conference.getMyUser();

				this.visible = !me.disableMyCam;
				this.includeInLayout = !me.disableMyCam;
			}

			private function init():void{
				dispatcher = new Dispatcher();
				numberOfCamerasOff = Media.availableCameras;
				for(var i:int = 0; i < Media.availableCameras; i++) {
					dp.push({label: Media.getCameraName(i), status: OFF_STATE});
				}

				dataMenu = Menu.createMenu(this, dp, false);
				dataMenu.addEventListener("itemClick", changeHandler);
				dataMenu.addEventListener("mouseOver", mouseOverHandler);
				dataMenu.addEventListener("mouseOut", mouseOutHandler);
				dataMenu.iconFunction = webcamMenuIcon;

				this.popUp = dataMenu;
				switchStateToNormal();
			}

			private function webcamMenuIcon(item:Object):Class {
				var styleManager:IStyleManager2 = StyleManager.getStyleManager(null);
				if(item.status == ON_STATE) {
					return styleManager.getStyleDeclaration(".webcamOnButtonStyle").getStyle("icon");
				}
				else {
					return styleManager.getStyleDeclaration(".webcamDefaultButtonStyle").getStyle("icon");
				}
			}

			private function switchStateToNormal():void {
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.start');
				this.styleName = "webcamDefaultButtonStyle";
				this.enabled = true;
				_currentState = OFF_STATE;
				lockSettingsChanged(null);
			}
			
			public function set isPresenter(presenter:Boolean):void {
				visible = includeInLayout = presenter;
			}

			public function remoteClick(e:ShortcutEvent):void{
				openPublishWindow();
				dispatchEvent(new ShortcutEvent(ShortcutEvent.REMOTE_FOCUS_WEBCAM));
			}
			
			public function publishingStatus(status:Number, camID:Number = -1):void {
				if(status == START_PUBLISHING) {
					_currentState = ON_STATE;
					//this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.stop');
					this.styleName = "webcamOnButtonStyle";
					this.enabled = true;
				}
				else {
					if(camID != -1) {
						dp[camID].status = OFF_STATE;
						if(numberOfCamerasOff < Media.availableCameras)
							numberOfCamerasOff++;
						
					}
					if(numberOfCamerasOff == Media.availableCameras) {
						switchStateToNormal();
					}
				}
				var evt:BBBEvent = new BBBEvent("EnableToolbarPopupButton");
				dispatchEvent(evt);
						
				dataMenu.dataProvider = dp;
			}


			private function openPublishWindow():void{
				this.enabled = false;
				if(_currentState == ON_STATE) {
					LOGGER.debug("[ToolbarPopupButton:openPublishWindow] Close window");
					switchStateToNormal();
					var stopShareCameraRequestEvent:StopShareCameraRequestEvent = new StopShareCameraRequestEvent(StopShareCameraRequestEvent.STOP_SHARE_ALL_CAMERA_REQUEST);
					dispatchEvent(stopShareCameraRequestEvent);
					
					var camEvent:BBBEvent = new BBBEvent(BBBEvent.ERASE_CAMERA_SETTING);
					camEvent.payload.restream = false;
					dispatchEvent(camEvent);
					
					this.enabled = true;		
				} else {
					LOGGER.debug("Share camera");
					if(numberOfCamerasOff > 0)
						numberOfCamerasOff--;
					_currentState = ON_STATE;
					this.styleName = "webcamOnButtonStyle";
					var shareCameraRequestEvent:ShareCameraRequestEvent = new ShareCameraRequestEvent();
					shareCameraRequestEvent.camerasArray = dp;
					dispatchEvent(shareCameraRequestEvent);
				}
			}

			private function handleCamSettingsClosedEvent(e:BBBEvent):void {
				this.setFocus();
				this.enabled = true;
				if(e.payload['clicked'] == "cancel") {
					if(numberOfCamerasOff < Media.availableCameras)
						numberOfCamerasOff++;
					if(numberOfCamerasOff == Media.availableCameras) {
						switchStateToNormal();
					}
				}
			}

			private function mouseOverHandler(event:MouseEvent):void {
				if(_currentState == ON_STATE)
					this.styleName = "webcamOffButtonStyle";
				else
					this.styleName = "webcamOnButtonStyle";
			}

			private function mouseOutHandler(event:MouseEvent):void {
				if(_currentState == ON_STATE)
					this.styleName = "webcamOnButtonStyle";
				else
					this.styleName = "webcamDefaultButtonStyle";
			}


			public function getAlignment():String{
				return MainToolbar.ALIGN_LEFT;
			}
			
			public function theory():String{
				return "Webcam button";
			}

			private function changeHandler(event:MenuEvent):void {
				if(dp[event.index].status == ON_STATE) {
					var stopShareCameraRequestEvent:StopShareCameraRequestEvent = new StopShareCameraRequestEvent();
					stopShareCameraRequestEvent.camId = event.index;
					dispatchEvent(stopShareCameraRequestEvent);
				}
				else {
					this.enabled = false;
					if(numberOfCamerasOff > 0)
						numberOfCamerasOff--;
					var shareCameraRequestEvent:ShareCameraRequestEvent = new ShareCameraRequestEvent();
					shareCameraRequestEvent.defaultCamera = String(event.index);
					shareCameraRequestEvent.camerasArray = dp;
					dispatchEvent(shareCameraRequestEvent);
				}
			}

			public function setCamAsInactive(camIndex:int):void {
				if(camIndex != -1) {
					dp[camIndex].status = OFF_STATE;
					dataMenu.dataProvider = dp;
				}
			}
	
			public function setAllCamAsInactive():void {
				numberOfCamerasOff = Media.availableCameras;
				for(var i:int = 0; i < Media.availableCameras; i++) {
					setCamAsInactive(i);
				}
				switchStateToNormal();
			}

			public function setCamAsActive(camIndex:int):void {
				if(camIndex != -1) {
					dp[camIndex].status = ON_STATE;
					dataMenu.dataProvider = dp;
				}
			}
		]]>
	</mx:Script>
</mx:PopUpButton>
