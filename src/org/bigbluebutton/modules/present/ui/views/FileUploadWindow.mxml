<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	 layout="absolute" width="580" height="410" styleName="presentationFileUploadWindowStyle"
      initialize="initData();">

    <mate:Dispatcher id="globalDispatch" />
    <mate:Listener type="{UploadProgressEvent.UPLOAD_PROGRESS_UPDATE}" method="handleUploadProgressUpdate" />
    <mate:Listener type="{UploadCompletedEvent.UPLOAD_COMPLETED}" method="handleUploadCompletedEvent" />
    <mate:Listener type="{UploadIoErrorEvent.UPLOAD_IO_ERROR}" method="handleUploadIoError" />
    <mate:Listener type="{UploadSecurityErrorEvent.UPLOAD_SECURITY_ERROR}" method="handleUploadSecurityError" />
    <mate:Listener type="{ConversionCompletedEvent.CONVERSION_COMPLETED}" method="handleConversionCompleted" />
    <mate:Listener type="{ConversionUpdateEvent.CONVERSION_UPDATE}" method="handleConvertUpdate" />
    <mate:Listener type="{CreatingThumbnailsEvent.CREATING_THUMBNAILS}" method="handleThumbnailsProgressEvent" />
    <mate:Listener type="{OfficeDocConvertFailedEvent.OFFICE_DOC_CONVERT_FAILED}" method="handleOfficeDocumentConversionFailed"/>
    <mate:Listener type="{OfficeDocConvertSuccessEvent.OFFICE_DOC_CONVERT_SUCCESS}" method="handleOfficeDocumentConversionSuccess"/>
    <mate:Listener type="{ConversionSupportedDocEvent.SUPPORTED_DOC}" method="handleSupportedDocument"/>	
    <mate:Listener type="{ConversionUnsupportedDocEvent.UNSUPPORTED_DOC}" method="handleUnsupportedDocument"/>
    <mate:Listener type="{ConversionPageCountError.PAGE_COUNT_ERROR}" method="handlePageCountFailed"/>
    <mate:Listener type="{ConversionPageCountMaxed.PAGE_COUNT_MAXED}" method="handlePageCountExceeded"/>
	<mate:Listener type="{RemovePresentationEvent.PRESENTATION_REMOVED_EVENT}" method="handlePresentationRemoved" />
  <mx:Script>
    <![CDATA[
		import mx.collections.ArrayCollection;
		import mx.utils.StringUtil;
		
		import org.as3commons.logging.api.ILogger;
		import org.as3commons.logging.api.getClassLogger;
		import org.bigbluebutton.common.Images;
		import org.bigbluebutton.modules.present.commands.UploadFileCommand;
		import org.bigbluebutton.modules.present.events.ConversionCompletedEvent;
		import org.bigbluebutton.modules.present.events.ConversionPageCountError;
		import org.bigbluebutton.modules.present.events.ConversionPageCountMaxed;
		import org.bigbluebutton.modules.present.events.ConversionSupportedDocEvent;
		import org.bigbluebutton.modules.present.events.ConversionUnsupportedDocEvent;
		import org.bigbluebutton.modules.present.events.ConversionUpdateEvent;
		import org.bigbluebutton.modules.present.events.CreatingThumbnailsEvent;
		import org.bigbluebutton.modules.present.events.OfficeDocConvertFailedEvent;
		import org.bigbluebutton.modules.present.events.OfficeDocConvertSuccessEvent;
		import org.bigbluebutton.modules.present.events.RemovePresentationEvent;
		import org.bigbluebutton.modules.present.events.UploadCompletedEvent;
		import org.bigbluebutton.modules.present.events.UploadEvent;
		import org.bigbluebutton.modules.present.events.UploadIoErrorEvent;
		import org.bigbluebutton.modules.present.events.UploadProgressEvent;
		import org.bigbluebutton.modules.present.events.UploadSecurityErrorEvent;
		import org.bigbluebutton.modules.present.model.PresentationModel;
		import org.bigbluebutton.util.i18n.ResourceUtil;
      
		private static const LOGGER:ILogger = getClassLogger(FileUploadWindow);      
        
      [Bindable] private var presentationNamesAC:ArrayCollection;
	    [BIndable] public var maxFileSize:Number;

      private var images:Images = new Images();
      [Bindable] private var addIcon : Class = images.add;
      [Bindable] private var bulletGoIcon : Class = images.bulletGo;
      [Bindable] private var deleteIcon : Class = images.cancel;

      private var thumbnailTimer:Timer = new Timer(5000);
      private var genThumbText:String = ResourceUtil.getInstance().getString('bbb.fileupload.genThumbText');
      private var genThumbDots:String = ".";

      private var fileToUpload:FileReference = new FileReference();
		
      override public function move(x:Number, y:Number):void{
        return;
      }
      
      private function initData():void {
        presentationNamesAC = PresentationModel.getInstance().getPresentations();
        if (presentationNamesAC.length <= 0) {
          selectFile();
        }
      }
            
      private function handleThumbnailsProgressEvent(event:CreatingThumbnailsEvent):void {	
        genThumbDots = ".";

        thumbnailTimer.repeatCount = 20;
        thumbnailTimer.addEventListener(TimerEvent.TIMER, timerHandler);
        thumbnailTimer.addEventListener(TimerEvent.TIMER_COMPLETE, completeHandler);           
        thumbnailTimer.start();				
      }

      private function handleConvertSuccessEvent(event:Event):void {
        thumbnailTimer.stop();
      }

      private function timerHandler(e:TimerEvent):void{
        displayGeneratingThumbnailsMessage();
      }

      private function completeHandler(e:TimerEvent):void {
        displayGeneratingThumbnailsMessage();
        thumbnailTimer.stop();
      }

      private function displayGeneratingThumbnailsMessage():void {
        genThumbDots += ".";
        progressBar.label = genThumbText + genThumbDots;
      }

      private function selectFile():void{
        fileToUpload.addEventListener(Event.SELECT, onSelectFile);	
        fileToUpload.browse([
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.presentationfile'), "*.pdf;*.doc;*.docx;*.xls;*.xlsx;*.ppt;*.pptx;*.txt;*.rtf;*.odt;*.ods;*.odp;*.odg;*.odc;*.odi;*.jpg;*.png"), 
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.pdf'), "*.pdf"),
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.word'), "*.doc;*.docx;*.odt;*.rtf;*.txt"), 
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.excel'), "*.xls;*.xlsx;*.ods"),
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.powerpoint'), "*.ppt;*.pptx;*.odp"),
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.image'), "*.jpg;*.jpeg;*.png")]);
      }

      private function onSelectFile(e:Event):void{
        lblFileName.text = fileToUpload.name;
        uploadBtn.enabled = true;
      }

      private function startUpload():void {
        var fileSize:Number = fileToUpload.size;
        var maxFileSizeBytes:Number = maxFileSize * 1000000;

        fileFormatHintLbl.visible = false;
        fileFormatHintLbl.includeInLayout = false;
		
		    uploadedFilesList.enabled = false;

        progressReportBox.visible = true;
        progressBar.visible = true;
        okCancelBtn.visible = true;
        
        disableClosing();
        
        selectBtn.enabled = false;
        uploadBtn.enabled = false;		
        
        if (fileSize > maxFileSizeBytes) {     
          // Hardcode for now to 30M limit. 
          // This should be configurable to match what's allowed in nginx. (ralam feb 23, 2010) 
          LOGGER.debug("File exceeds max limit:({0}>{1})", [fileSize, maxFileSizeBytes]);  			
          enableControls();
          displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.maxUploadFileExceededAlert'));
        } else {
          var presentationName:String = StringUtil.trim(fileToUpload.name);
          LOGGER.debug("Uploading file : {0}", [presentationName]);

          progBarLbl.visible = true;          
          lblFileName.enabled = false;
          
          var uploadCmd:UploadFileCommand = new UploadFileCommand();
          uploadCmd.filename = presentationName;
          uploadCmd.file = fileToUpload;
          globalDispatch.dispatchEvent(uploadCmd);

        }       		
      }

      private function handleUploadProgressUpdate(e:UploadProgressEvent):void{
        var progress:Number = e.percentUploaded;
        progressBar.label = progress + "% " + ResourceUtil.getInstance().getString('bbb.presentation.uploaded');
        progressBar.setProgress(progress, 100);
        progressBar.validateNow();
      }

      private function handleUploadCompletedEvent(e:UploadCompletedEvent):void{
        progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.uploadcomplete');
        progressBar.setProgress(0, 100);
        progressBar.validateNow();

        selectBtn.visible = false;
        uploadBtn.visible = false;
        selectBtn.enabled = false;
        uploadBtn.enabled = false;	
        lblFileName.visible = false;
      }

      private function handleOfficeDocumentConversionFailed(e:OfficeDocConvertFailedEvent):void {
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.document.convert.failed'));
      }   

      private function handleOfficeDocumentConversionSuccess(e:OfficeDocConvertSuccessEvent):void {
        progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.document.converted');
        progressBar.setProgress(0, 100);
        progressBar.validateNow();
      }

      private function handleSupportedDocument(e:ConversionSupportedDocEvent):void {
        LOGGER.debug("handleSupportedDocument");
        progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.document.supported');
        progressBar.setProgress(0, 100);
        progressBar.validateNow();
      }

      private function handleUnsupportedDocument(e:ConversionUnsupportedDocEvent):void {
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.notsupported'));
      }

      private function handlePageCountFailed(e:ConversionPageCountError):void {
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.nbpage'));
      }

      private function handlePageCountExceeded(e:ConversionPageCountMaxed):void {
		LOGGER.debug("handlePageCountExceeded");
        enableControls();
        var message:String = " Maximum supported is " + e.maxPages;
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.maxnbpagereach'), message);
      }

      private function handleUploadIoError(e:UploadIoErrorEvent):void{
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.io'));
      }

      private function handleUploadSecurityError(e:UploadSecurityErrorEvent):void{
        enableControls();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.security'));
      }

      private function displayAlert(error:String, message:String = null):void {
        var okLabel:String = ResourceUtil.getInstance().getString('bbb.presentation.ok');        	
        progressBar.setStyle("color", 0xFF0000);
        progressBar.label = error + message;
        okCancelBtn.label = "Ok";
      }

      private function enableControls():void {
        okCancelBtn.visible = true;
        okCancelBtn.enabled = true;
        selectBtn.enabled = true;
        uploadBtn.enabled = true;
        lblFileName.enabled = true;			
      }

      private function handleConvertUpdate(e:ConversionUpdateEvent):void{
        progressBar.label = ResourceUtil.getInstance().getString('bbb.presentation.converted',[e.numPagesDone, e.totalPages]);
        progressBar.setProgress(e.numPagesDone, e.totalPages);
        progressBar.validateNow();
      }

      private function handleConversionCompleted(e:ConversionCompletedEvent):void{
        okCancelBtn.label = ResourceUtil.getInstance().getString('bbb.presentation.ok');
        enableClosing();
        globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
      }

      private function disableClosing():void {
        okCancelBtn.enabled = false;
      }
      
      private function enableClosing():void {
        okCancelBtn.enabled = true;
      }
		
		private function handlePresentationRemoved(e:RemovePresentationEvent):void {
			for(var i:int = 0; i < presentationNamesAC.length; i++) {
				if(e.presentationName == presentationNamesAC.getItemAt(i).id) {
					presentationNamesAC.removeItemAt(i);
					return;
				}
			}
		}
  ]]>

  </mx:Script>

  <mx:VBox width="100%" height="100%" verticalAlign="top">
    <mx:TextArea borderSkin="{null}"
				 text="{ResourceUtil.getInstance().getString('bbb.fileupload.title')}"
                 editable="false" styleName="presentationUploadTitleStyle"
                 width="400" left="0"/>
    <mx:HBox id="fileUploadBox" width="100%" paddingLeft="5" paddingTop="0" verticalAlign="middle"> 
      <mx:Label id="lblFileName" width="{fileUploadBox.width-selectBtn.width-uploadBtn.width-30}" selectable="false" click="selectFile()" text="{ResourceUtil.getInstance().getString('bbb.fileupload.lblFileName.defaultText')}" />
	  <mx:Button id="selectBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.selectBtn.label')}" 
				   toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.selectBtn.toolTip')}" 
				   click="selectFile()" styleName="presentationUploadChooseFileButtonStyle"/>
      <mx:Button id="uploadBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.uploadBtn')}" 
                 toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.uploadBtn.toolTip')}"  click="startUpload()"
                 enabled="false" icon="{bulletGoIcon}"/>
    </mx:HBox>
    <mx:HBox id="progressReportBox" width="100%" paddingLeft="10" paddingTop="5" paddingBottom="10" includeInLayout="true" visible="false">
      <mx:Label id="progBarLbl" text="{ResourceUtil.getInstance().getString('bbb.fileupload.progBarLbl')}" 
                styleName="presentationUploadProgressBarLabelStyle" visible="false"/>
      <mx:ProgressBar id="progressBar" mode="manual" label="{ResourceUtil.getInstance().getString('bbb.fileupload.progBarLbl')}"
                      styleName="presentationUploadProgressBarStyle" labelPlacement="center" width="460" visible="false"/>
    </mx:HBox>
	<mx:Box width="100%" height="100%" paddingLeft="5" paddingRight="5">
		<mx:Box width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" styleName="presentationUploadFileFormatHintBoxStyle">
	        <mx:Text width="100%" id="fileFormatHintLbl" textAlign="center" text="{ResourceUtil.getInstance().getString('bbb.fileupload.fileFormatHint')}" styleName="presentationUploadFileFormatHintTextStyle"/>
		</mx:Box>
    </mx:Box>
    <mx:Canvas width="100%" height="145" verticalScrollPolicy="off">
      <mx:List width="100%" height="142" left="5" top="5" right="5" bottom="5" id="uploadedFilesList" alternatingItemColors="[#EFEFEF, #FEFEFE]" allowMultipleSelection="false"
               itemRenderer="org.bigbluebutton.modules.present.ui.views.UploadedPresentationRenderer"
               dragEnabled="false" dataProvider="{presentationNamesAC}">
      </mx:List>
    </mx:Canvas>
    <mx:Canvas width="100%" height="100%">
      <mx:Button id="okCancelBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.okCancelBtn')}"
                 styleName="presentationUploadCancelButtonStyle" right="5" bottom="15"
                 click="globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW))"
                 toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.okCancelBtn.toolTip')}"/>
    </mx:Canvas>	
  </mx:VBox>

</mx:TitleWindow> 
