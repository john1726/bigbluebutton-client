<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:flexmdi="flexlib.mdi.containers.*"
		xmlns:logModule="org.bigbluebutton.modules.log.view.components.*"
		xmlns:views="org.bigbluebutton.main.views.*"
		xmlns:mate="http://mate.asfusion.com/"
		xmlns:maps="org.bigbluebutton.main.maps.*"
		xmlns:api="org.bigbluebutton.main.api.*"
		xmlns:common="org.bigbluebutton.common.*"
		width="100%" height="{parentApplication.height - 1}"
		horizontalScrollPolicy="off" verticalScrollPolicy="off"
		creationComplete="initializeShell()">

	<!--
	height="{parentApplication.height - 1}" : The container height is set to fix height because the percentHeight
	generates a script execution timeout in the GraphicsWrapper class. We also remove one pixel to force the first
	update as the height property needs a value different from thec current one to be updated.
		
	-->
	
	<mate:Listener type="{OpenWindowEvent.OPEN_WINDOW_EVENT}" method="handleOpenWindowEvent" />	
	<mate:Listener type="{CloseWindowEvent.CLOSE_WINDOW_EVENT}" method="handleCloseWindowEvent"/>
	<mate:Listener type="{AddUIComponentToMainCanvas.ADD_COMPONENT}" method="addComponentToCanvas" />
	<mate:Listener type="{AppVersionEvent.APP_VERSION_EVENT}" method="handleApplicationVersionEvent" />	
	<mate:Listener type="{MeetingNotFoundEvent.MEETING_NOT_FOUND}" method="handleMeetingNotFoundEvent" />
	<mate:Listener type="{ConnectionFailedEvent.USER_LOGGED_OUT}" method="handleLogout" />
    <mate:Listener type="{ConnectionFailedEvent.USER_EJECTED_FROM_MEETING}" method="handleLogout" />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_FAILED}" method="attemptReconnect" />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_CLOSED}" method="attemptReconnect"  />
	<mate:Listener type="{ConnectionFailedEvent.UNKNOWN_REASON}" method="attemptReconnect"  />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_REJECTED}" method="attemptReconnect"  />
	<mate:Listener type="configLoadedEvent" method="initOptions"  />
	<mate:Listener type="{FlashMicSettingsEvent.FLASH_MIC_SETTINGS}" method="handleFlashMicSettingsEvent"  />
	<mate:Listener type="{WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_CONNECTING}" method="handleWebRTCEchoTestConnectingEvent"  />
	<mate:Listener type="{WebRTCMediaEvent.WEBRTC_MEDIA_REQUEST}" method="handleWebRTCMediaRequestEvent"  />
	<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_STARTED}" method="handleWebRTCCallStartedEvent" />
	<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_ENDED}" method="handleWebRTCCallEndedEvent" />
	<mate:Listener type="{AudioSelectionWindowEvent.SHOW_AUDIO_SELECTION}" method="handleShowAudioSelectionWindowEvent" />
	<mate:Listener type="{ShareCameraRequestEvent.SHARE_CAMERA_REQUEST}" method="handleShareCameraRequestEvent" />
  
	<mate:Listener type="{ToolbarButtonEvent.ADD}" method="handleAddToolbarComponent" />	
	<mate:Listener type="{ToolbarButtonEvent.REMOVE}" method="handleRemoveToolbarComponent"/>
	<mate:Listener type="{ShortcutEvent.OPEN_SHORTCUT_WIN}" method="openShortcutHelpWindow" />
	<mate:Listener type="{BBBEvent.OPEN_WEBCAM_PREVIEW}" method="openVideoPreviewWindow" />
	<mate:Listener type="{LockControlEvent.OPEN_LOCK_SETTINGS}" method="openLockSettingsWindow" />
	<mate:Listener type="{InvalidAuthTokenEvent.INVALID_AUTH_TOKEN}" method="handleInvalidAuthToken" />
	  
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.events.Event;
			import flash.events.FullScreenEvent;
			import flash.events.IOErrorEvent;
			import flash.events.TextEvent;
			import flash.geom.Point;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import flexlib.mdi.effects.effectsLib.MDIVistaEffects;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.events.AddUIComponentToMainCanvas;
			import org.bigbluebutton.common.events.CloseWindowEvent;
			import org.bigbluebutton.common.events.OpenWindowEvent;
			import org.bigbluebutton.common.events.ToolbarButtonEvent;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.events.LockControlEvent;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.core.vo.LockSettingsVO;
			import org.bigbluebutton.main.events.AppVersionEvent;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ClientStatusEvent;
			import org.bigbluebutton.main.events.InvalidAuthTokenEvent;
			import org.bigbluebutton.main.events.MeetingNotFoundEvent;
			import org.bigbluebutton.main.events.ModuleLoadEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.model.LayoutOptions;
			import org.bigbluebutton.main.model.users.Conference;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.modules.phone.events.AudioSelectionWindowEvent;
			import org.bigbluebutton.modules.phone.events.FlashMicSettingsEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCCallEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCEchoTestEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCMediaEvent;
			import org.bigbluebutton.modules.videoconf.events.ShareCameraRequestEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
	
			private static const LOGGER:ILogger = getClassLogger(MainApplicationShell);      
      
			private var globalDispatcher:Dispatcher;			
			private var dispState:String; //full-screen?
			private var images:Images = new Images();
			private var stoppedModules:ArrayCollection;			
			private var logWindow:LogWindow;
			private var scWindow:ShortcutHelpWindow;
			private var logoutWindow:LoggedOutWindow;
			private var connectionLostWindow:ConnectionLostWindow;
			
			// LIVE or PLAYBACK
			private var _mode:String = 'LIVE';
			[Bindable] public var appVersion:String = ' ';
			private var localeVersion:String = 'old';
			[Bindable] public var numberOfModules:int = 0;
			
			[Bindable] private var fullscreen_icon:Class = images.full_screen;
			[Bindable] private var logs_icon:Class = images.table;
			[Bindable] private var reset_layout_icon:Class = images.layout;
			[Bindable] private var statsIcon:Class = images.bandwidth;
      
			private var receivedConfigLocaleVer:Boolean = false;
			private var receivedResourceLocaleVer:Boolean = false;
			
			public function get mode():String {
				return _mode;
			}
			
			[Bindable] private var layoutOptions:LayoutOptions;
			
			[Bindable] private var showToolbarOpt:Boolean = true;
			[Bindable] private var toolbarHeight:Number = 32;
			[Bindable] private var toolbarPaddingTop:Number = 4;
			[Bindable] private var showFooterOpt:Boolean = true;
			[Bindable] private var footerHeight:Number = 24;
			
			[Bindable] private var isTunneling:Boolean = false;
			
			private var confirmingLogout:Boolean = false;
			private var chromeBrowser:ChromeWebcamPermissionImage = null;
			
			public function getLogWindow() : LogWindow
			{
				if (logWindow == null){
					logWindow = new LogWindow();
				}
				return logWindow;
			}
      
			public function initOptions(e:Event):void {
				UserManager.getInstance().getConference().configLockSettings();
				layoutOptions = new LayoutOptions();
				layoutOptions.parseOptions();
				showToolbarOpt = layoutOptions.showToolbar;
				if (!showToolbarOpt) {
					toolbarHeight = 0;
					toolbarPaddingTop = 0;
					calculateCanvasHeight();
				}
				toolbar.displayToolbar();
				
				showFooterOpt = layoutOptions.showFooter;
				var locale:Object = BBB.initConfigManager().config.language;
				langSelector.visible = locale.userSelectionEnabled;
				
				if (!showFooterOpt) {
					footerHeight = 0;
					controlBar.visible = false;
					calculateCanvasHeight();
				}
			}
		
			protected function initializeShell():void {	
				globalDispatcher = new Dispatcher();
				
				systemManager.addEventListener(Event.RESIZE, handleApplicationResizeEvent);
				calculateCanvasHeight();
			}
			
			private function handleApplicationResizeEvent(e:Event):void {
				calculateCanvasHeight();
			}
		
			protected function initFullScreen():void {				
				/* Set up full screen handler. */
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				dispState = stage.displayState;
			}					
			
			private var sendStartModulesEvent:Boolean = true;
			
			// We have to calculate the canvas height manually because if you set it to a 
			// percentage you will get execution timeout errors.
			// See issue #2437 for why you shouldn't set height to 100% 
			//             https://github.com/bigbluebutton/bigbluebutton/issues/2437
			private function calculateCanvasHeight():void {
				var screenRect:Rectangle = systemManager.screen;
				mdiCanvas.height = screenRect.height - footerHeight - toolbarHeight - 12;
			}
			
			private function handleApplicationVersionEvent(event:AppVersionEvent):void {
				if (event.configLocaleVersion == true) {
					receivedConfigLocaleVer = true;
					appVersion = event.appVersion;
					localeVersion = event.localeVersion;
					LOGGER.debug("Received locale version fron config.xml");
				} else {
					receivedResourceLocaleVer = true;
					LOGGER.debug("Received locale version fron locale file.");
				}
				
				if (receivedConfigLocaleVer && receivedResourceLocaleVer) {
					LOGGER.debug("Comparing locale versions.");
					if (!event.suppressLocaleWarning) checkLocaleVersion(localeVersion);
					if (sendStartModulesEvent) {
            
						sendStartModulesEvent = false;
						sendStartAllModulesEvent();
					}				
				}						
			}
			
			public function sendStartAllModulesEvent():void{
				LOGGER.debug("Sending start all modules event");
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new ModuleLoadEvent(ModuleLoadEvent.START_ALL_MODULES));	
			}
			
			private function fullScreenHandler(evt:FullScreenEvent):void {
				dispState = stage.displayState + " (fullScreen=" + evt.fullScreen.toString() + ")";
				if (evt.fullScreen) {
					LOGGER.debug("Switching to full screen");
					/* Do something specific here if we switched to full screen mode. */
				
				} else {
					LOGGER.debug("Switching to normal screen");
					/* Do something specific here if we switched to normal mode. */
				}
			}			
			
			private function openLogWindow():void {
				mdiCanvas.windowManager.add(getLogWindow());
				mdiCanvas.windowManager.absPos(logWindow, 50, 50);
				logWindow.width = mdiCanvas.width - 100;
				logWindow.height = mdiCanvas.height - 100;
			}
			
			public function openShortcutHelpWindow(e:Event = null):void{
				if (scWindow == null) {
					scWindow = new ShortcutHelpWindow();
				}
				
				if (scWindow.minimized)
					scWindow.restore();
				
				if (scWindow.maximized)
					scWindow.restore();
				
				mdiCanvas.windowManager.add(scWindow);
				mdiCanvas.windowManager.absPos(scWindow, mdiCanvas.width/2 - scWindow.width/2, mdiCanvas.height/2 - scWindow.height/2);
				
				scWindow.focusHead();
			}
			
			private function toggleFullScreen():void{
				LOGGER.debug("Toggling fullscreen");
	   			try {
					switch (stage.displayState) {
						case StageDisplayState.FULL_SCREEN:
							LOGGER.debug("full screen mode");
							// If already in full screen mode, switch to normal mode.
							stage.displayState = StageDisplayState.NORMAL;
							break;
						default:
							LOGGER.debug("Normal screen mode");
							// If not in full screen mode, switch to full screen mode.
							stage.displayState = StageDisplayState.FULL_SCREEN;
							break;
					}
				} catch (err:SecurityError) {
					// ignore
				}
	   		}	
	   		
	   		private function handleOpenWindowEvent(event:OpenWindowEvent):void {
				// this is a terrible place for these checks because this function runs 4 times on startup
				if (BBB.initConnectionManager().isTunnelling) {
					isTunneling = true;
					globalDispatcher.dispatchEvent(new ClientStatusEvent(ClientStatusEvent.WARNING_MESSAGE_EVENT, ResourceUtil.getInstance().getString("bbb.clientstatus.tunneling.title"), ResourceUtil.getInstance().getString("bbb.clientstatus.tunneling.message")));
				}
				versionCheck();
				
				var window:IBbbModuleWindow = event.window;
	   			mdiCanvas.addWindow(window);
	   		}
	   		
	   		private function handleCloseWindowEvent(event:CloseWindowEvent):void {
	   			var window:IBbbModuleWindow = event.window;
				  mdiCanvas.removeWindow(window);
	   		}
	   		
			private function versionCheck():void {
				var xml:XML = BBB.initConfigManager().config.browserVersions;
				if (xml.@chrome != undefined && xml.@firefox != undefined && xml.@flash != undefined) {
					//find browser version
					var browserVersion:Array = ExternalInterface.call("determineBrowser");
					//check browser version
					if ((browserVersion[0].toString().toLowerCase() == "chrome" && browserVersion[1] < xml.@chrome) || browserVersion[0].toString().toLowerCase() == "firefox" && browserVersion[1] < xml.@firefox) {
						globalDispatcher.dispatchEvent(new ClientStatusEvent(ClientStatusEvent.WARNING_MESSAGE_EVENT, 
							ResourceUtil.getInstance().getString("bbb.clientstatus.browser.title"), 
							ResourceUtil.getInstance().getString("bbb.clientstatus.browser.message", [browserVersion[0]+" "+browserVersion[1]])));
					}
					
					//find flash version
					var flashVersion:Object = getFlashVersion(); 
					//check flash version
					if ((flashVersion.os == 'LNX' && browserVersion[0].toString().toLowerCase() != "chrome" && flashVersion.major < 11) || 
						((flashVersion.os != 'LNX' || browserVersion[0].toString().toLowerCase() == "chrome") && flashVersion.major < xml.@flash)) {
						globalDispatcher.dispatchEvent(new ClientStatusEvent(ClientStatusEvent.WARNING_MESSAGE_EVENT, 
							ResourceUtil.getInstance().getString("bbb.clientstatus.flash.title"), 
							ResourceUtil.getInstance().getString("bbb.clientstatus.flash.message", [flashVersion.major+"."+flashVersion.minor+"."+flashVersion.build])));
					}
				}

				//Alert.show(LOG + "version check- os: "+flashVersion.os+" major:"+flashVersion.major+" minor:"+flashVersion.minor+" build:"+flashVersion.build+" browser:"+browserVersion[0]+" version:"+browserVersion[1]);
				
				//find java version
				//check flash version
			}
			
			//function found here, http://www.mediacollege.com/adobe/flash/actionscript/3/player-version.html
			private function getFlashVersion():Object {
				var flashVersion:Object = new Object();
				var versionNumber:String = Capabilities.version;// Get the whole version string
				var versionArray:Array = versionNumber.split(",");// Split it up
				var osPlusVersion:Array = versionArray[0].split(" ");// The main version contains the OS (e.g. WIN), so we split that off as well.
				// Populate the version object (the OS is a string, others are numbers):
				flashVersion["os"] = osPlusVersion[0];
				flashVersion["major"] = parseInt(osPlusVersion[1]);
				flashVersion["minor"] = parseInt(versionArray[1]);
				flashVersion["build"] = parseInt(versionArray[2]);
				return flashVersion;
			}
			
	   		private function resetLayout():void{
	   			mdiCanvas.resetWindowLayout();
	   		}
	   		
	   		private function addComponentToCanvas(e:AddUIComponentToMainCanvas):void{
	   			mdiCanvas.addChild(e.component);
	   		}
	   		
	   		public function checkLocaleVersion(localeVersion:String):void {	   			
	   			Alert.okLabel ="OK";
				var version:String = "old-locales";
				version = ResourceUtil.getInstance().getString('bbb.mainshell.locale.version');
				LOGGER.debug("Locale from config={0}, from locale file={1}", [localeVersion, version]);

				if ((version == "old-locales") || (version == "") || (version == null)) {
					wrongLocaleVersion();
				} else {
					if (version != localeVersion) wrongLocaleVersion();
				}	   			
	   		}

			private function handleFlashMicSettingsEvent(event:FlashMicSettingsEvent):void {
				/**
				 * There is a bug in Flex SDK 4.14 where the screen stays blurry if a 
				 * pop-up is opened from another pop-up. I delayed the second open to 
				 * avoid this case. - Chad
				 */
				this.callLater( function():void {
					var micSettings:FlashMicSettings = PopUpManager.createPopUp(mdiCanvas, FlashMicSettings, true) as FlashMicSettings;
					micSettings.addEventListener(FlexEvent.CREATION_COMPLETE, function(e:Event):void {
						var point1:Point = new Point();
						// Calculate position of TitleWindow in Application's coordinates. 
						point1.x = width/2;
						point1.y = height/2;
						micSettings.x = point1.x - (micSettings.width/2);
						micSettings.y = point1.y - (micSettings.height/2);
					});
				});
			}
			
      private function openVideoPreviewWindow(event:BBBEvent):void {
        var camSettings:CameraDisplaySettings = CameraDisplaySettings(PopUpManager.createPopUp(mdiCanvas, CameraDisplaySettings, true));		
        camSettings.defaultCamera = event.payload.defaultCamera;
        camSettings.camerasArray = event.payload.camerasArray;
        camSettings.publishInClient = event.payload.publishInClient;
        camSettings.chromePermissionDenied = event.payload.chromePermissionDenied;
        
        var point1:Point = new Point();
        // Calculate position of TitleWindow in Application's coordinates. 
        point1.x = width/2;
        point1.y = height/2;                
        camSettings.x = point1.x - (camSettings.width/2);
        camSettings.y = point1.y - (camSettings.height/2);	
      }
      
	   	private function wrongLocaleVersion():void {
				var localeWindow:OldLocaleWarnWindow = OldLocaleWarnWindow(PopUpManager.createPopUp(mdiCanvas, OldLocaleWarnWindow, false));

				var point1:Point = new Point();
	        	// Calculate position of TitleWindow in Application's coordinates. 
				point1.x = width/2;
				point1.y = height/2;              
				localeWindow.x = point1.x - (localeWindow.width/2);
				localeWindow.y = point1.y - (localeWindow.height/2);	
      }

      private function handleShowAudioSelectionWindowEvent(event:AudioSelectionWindowEvent):void {
  	    var audioSelection:IFlexDisplayObject = PopUpManager.createPopUp(mdiCanvas, AudioSelectionWindow, true);
		PopUpManager.centerPopUp(audioSelection);
	  }
          
      private function handleWebRTCMediaRequestEvent(event:WebRTCMediaEvent):void {
        var browser:String = ExternalInterface.call("determineBrowser")[0];
        if (browser == "Firefox") {
          var ffBrowser:FirefoxMicPermissionImage = PopUpManager.createPopUp(mdiCanvas, FirefoxMicPermissionImage, true) as FirefoxMicPermissionImage;
          ffBrowser.addEventListener(FlexEvent.CREATION_COMPLETE, function(e:Event):void {
            ffBrowser.x = 100;
            ffBrowser.y = 150;
          }); 
        } else if (browser == "Chrome") {
          var chromeBrowser:ChromeMicPermissionImage = PopUpManager.createPopUp(mdiCanvas, ChromeMicPermissionImage, true) as ChromeMicPermissionImage;
          chromeBrowser.addEventListener(FlexEvent.CREATION_COMPLETE, function(e:Event):void {
            chromeBrowser.x = 20;
            chromeBrowser.y = 130;
          });          
        }
      }
      
      private function handleWebRTCEchoTestConnectingEvent(event:WebRTCEchoTestEvent):void {
        var webRTCEchoTest:WebRTCEchoTest = PopUpManager.createPopUp(mdiCanvas, WebRTCEchoTest, true) as WebRTCEchoTest;
          webRTCEchoTest.addEventListener(FlexEvent.CREATION_COMPLETE, function(e:Event):void {
          var point1:Point = new Point();
          // Calculate position of TitleWindow in Application's coordinates. 
          point1.x = width/2;
          point1.y = height/2;
          webRTCEchoTest.x = point1.x - (webRTCEchoTest.width/2);
          webRTCEchoTest.y = point1.y - (webRTCEchoTest.height/2);
        });        
      }

      private function handleShareCameraRequestEvent(event:ShareCameraRequestEvent):void {
          if (ExternalInterface.call("determineBrowser")[0] == "Chrome" && chromeBrowser == null ) {
          chromeBrowser = PopUpManager.createPopUp(mdiCanvas, ChromeWebcamPermissionImage , true) as ChromeWebcamPermissionImage;
          chromeBrowser.addEventListener(FlexEvent.CREATION_COMPLETE, function(e:Event):void {
          var point1:Point = new Point();
          // Calculate position of TitleWindow in Application's coordinates.
          point1.x = width/2;
          point1.y = height/2;
          if (Capabilities.os.indexOf("Mac") >= 0) {
            chromeBrowser.x = (mdiCanvas.width - chromeBrowser.width);
		  }
          else {
		    chromeBrowser.x = 20;
		  }
	      chromeBrowser.y = 20;
         });
       }
     }
      
      private function handleMeetingNotFoundEvent(e:MeetingNotFoundEvent):void {
        showlogoutWindow(ResourceUtil.getInstance().getString('bbb.mainshell.meetingNotFound'));
      }
      
      private function showlogoutWindow(reason:String):void {
        if (layoutOptions!= null && layoutOptions.showLogoutWindow) {
          if (logoutWindow != null) return;
          logoutWindow = LoggedOutWindow(PopUpManager.createPopUp( mdiCanvas, LoggedOutWindow, true));
          
          var point1:Point = new Point();
          // Calculate position of TitleWindow in Application's coordinates. 
          point1.x = width/2;
          point1.y = height/2;                 
          logoutWindow.x = point1.x - (logoutWindow.width/2);
          logoutWindow.y = point1.y - (logoutWindow.height/2);
          
          logoutWindow.setReason(reason);
          mdiCanvas.removeAllPopUps();
		  removeToolBars();
        } else {
          mdiCanvas.removeAllPopUps();
		  removeToolBars();
          var pageHost:String = FlexGlobals.topLevelApplication.url.split("/")[0];
          var pageURL:String = FlexGlobals.topLevelApplication.url.split("/")[2];
          LOGGER.debug("SingOut to [{0}//{1}/bigbluebutton/api/signOut]", [pageHost, pageURL]);
          var request:URLRequest = new URLRequest(pageHost + "//" + pageURL + "/bigbluebutton/api/signOut");
          var urlLoader:URLLoader = new URLLoader();
          urlLoader.addEventListener(Event.COMPLETE, handleLogoutComplete);	
          urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handleLogoutError);
          urlLoader.load(request);
        }	        
      }
	
	  /**
	   * Removes toolbars from the display list.
	   * Used only when the user completely logged out.
	   */
	  private function removeToolBars():void{
		  this.removeChild(toolbar);
		  this.removeChild(controlBar);
	  }
      
      public function getLogoutUrl():String {
        var logoutUrl:String = BBB.initUserConfigManager().getLogoutUrl();
        if (logoutUrl == null) {
          LOGGER.debug("URL=[{0}]", [FlexGlobals.topLevelApplication.url]);
          var pageHost:String = FlexGlobals.topLevelApplication.url.split("/")[0];
          var pageURL:String = FlexGlobals.topLevelApplication.url.split("/")[2];
          logoutUrl = pageHost + "//" + pageURL;
        }      
        return logoutUrl;
      }
      
			private function handleLogout(e:ConnectionFailedEvent):void {
        if (e is ConnectionFailedEvent) {
          showlogoutWindow((e as ConnectionFailedEvent).type);
        }
        else showlogoutWindow("You have logged out of the conference");	
			}
      
			private function redirectToLogoutUrl ():void {
        		var logoutURL:String = getLogoutUrl();
				var request:URLRequest = new URLRequest(logoutURL);
				LOGGER.debug("Logging out to: {0}", [logoutURL]);
				navigateToURL(request, '_self');
			}
			

			private function handleLogoutError(e:Event):void {
				LOGGER.debug("Call to signOut URL failed.");
				redirectToLogoutUrl();
			}
			
			private function handleLogoutComplete(e:Event):void {	
				LOGGER.debug("Call to signOut URL succeeded.");
				redirectToLogoutUrl();
			}
			
			private function attemptReconnect(e:ConnectionFailedEvent):void{
				/*if (connectionLostWindow != null) return;
				connectionLostWindow = ConnectionLostWindow(PopUpManager.createPopUp( mdiCanvas, ConnectionLostWindow, true));
				connectionLostWindow.x = mdiCanvas.width/2 - connectionLostWindow.width/2;
				connectionLostWindow.y = mdiCanvas.height/2 - connectionLostWindow.height/2;*/
				
				//Temporary fix
				handleLogout(e);
			}
			
			private function handleAddToolbarComponent(event:ToolbarButtonEvent):void {
				if (event.location == ToolbarButtonEvent.BOTTOM_TOOLBAR) {
					(event.button as UIComponent).tabIndex = tabIndexer.startIndex + addedBtns.numChildren + 10;
					addedBtns.addChild(event.button as UIComponent);
					//realignButtons();
				}
			}
			
			private function handleWebRTCCallStartedEvent(e:WebRTCCallEvent):void {
				lblWebRTC.visible = lblWebRTC.includeInLayout = true;
			}
			
			private function handleWebRTCCallEndedEvent(e:WebRTCCallEvent):void {
				lblWebRTC.visible = lblWebRTC.includeInLayout = false;
			}
      
      private function handleInvalidAuthToken(event:InvalidAuthTokenEvent):void {
        showlogoutWindow(ResourceUtil.getInstance().getString('bbb.mainshell.invalidAuthToken'));
        globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.CANCEL_RECONNECTION_EVENT));
      }
			
			private function handleRemoveToolbarComponent(event:ToolbarButtonEvent):void {
				if (addedBtns.contains(event.button as UIComponent))
					addedBtns.removeChild(event.button as UIComponent);
			}

			private var networkStatsWindow:NetworkStatsWindow = new NetworkStatsWindow();

			private function openNetworkStatsWindow(e:Event = null):void {
				/*var btnPosition:Point = new Point(btnNetwork.x, btnNetwork.y);
				var btnPositionOnGlobal:Point = btnNetwork.localToGlobal(btnPosition);
				var windowPosition:Point = networkStatsWindow.globalToLocal(btnPositionOnGlobal);
				
				windowPosition.x += btnNetwork.width + 10;
				windowPosition.y -= networkStatsWindow.height - 10;

				networkStatsWindow.x = windowPosition.x;
				networkStatsWindow.y = windowPosition.y;*/

				networkStatsWindow.appear();
			}
			
			private function closeNetworkStatsWindow(e:Event = null):void {
				networkStatsWindow.disappear();
			}
			
			private function openLockSettingsWindow(event:LockControlEvent):void {
				var conference:Conference = UserManager.getInstance().getConference();
				var lsv:LockSettingsVO = conference.getLockSettings();
        
				var popUp:IFlexDisplayObject = PopUpManager.createPopUp(mdiCanvas, LockSettings, true);
				var ls:LockSettings = LockSettings(popUp);
				ls.disableCam = lsv.getDisableCam();
				ls.disableMic = lsv.getDisableMic();
				ls.disablePrivChat = lsv.getDisablePrivateChat();
				ls.disablePubChat = lsv.getDisablePublicChat();
				ls.lockedLayout = lsv.getLockedLayout();
				ls.lockOnJoin = lsv.getLockOnJoin();
				ls.lockOnJoinConfigurable = lsv.getLockOnJoinConfigurable();
        
				var point1:Point = new Point();
				point1.x = width/2;
				point1.y = height/2;
				ls.x = point1.x - (ls.width/2);
				ls.y = point1.y - (ls.height/2);	
			}
			
			private function onFooterLinkClicked(e:TextEvent):void{
				LOGGER.debug("Clicked on link[{0}] from footer", [e.text]);
				if (ExternalInterface.available) {
					ExternalInterface.call("chatLinkClicked", e.text);
				}
			}
		]]>
	</mx:Script>
	
	<common:TabIndexer id="tabIndexer" startIndex="100000"
					   tabIndices="{[langSelector, logBtn]}"/>

	<views:MainToolbar id="toolbar" 
					   dock="true" 
					   width="100%" 
					   height="{toolbarHeight}" 
					   visible="{showToolbarOpt}" 
					   verticalAlign="middle" 
					   toolbarOptions="{layoutOptions}" 
					   paddingTop="{toolbarPaddingTop}"/>
					   
	<views:MainCanvas id="mdiCanvas" 
					  horizontalScrollPolicy="off" 
					  verticalScrollPolicy="off" 
					  effectsLib="{flexlib.mdi.effects.effectsLib.MDIVistaEffects}" 
					  width="100%" >
		<views:LoadingBar id="progressBar" horizontalCenter="0" verticalCenter="0" width="50%" />
		<views:BrandingLogo x="{this.width - 300}" y="{this.height - 300}" />
	</views:MainCanvas>	
	
	<mx:ControlBar width="100%" height="{footerHeight}" paddingTop="0" id="controlBar">
		<mx:Label
				htmlText="2016 Tuber Education Inc."
				link="onFooterLinkClicked(event)"
				id="copyrightLabel2" truncateToFit="true"
				width="100%" minWidth="1"
				selectable="true" paddingRight="10"/>
		
		<mx:Label 
				id="lblWebRTC"
				text="{'[ '+ResourceUtil.getInstance().getString('bbb.mainshell.notification.webrtc')+' ]'}"
				visible="false"
				includeInLayout="false" />
		<mx:Label
				text="{'['+ResourceUtil.getInstance().getString('bbb.mainshell.notification.tunnelling')+']'}"
				id="isTunnellingLbl"
				visible="{isTunneling}"
				includeInLayout="{isTunneling}" />
		<views:WarningButton id="warningBtn" 
				width="23"
				height="20"/>
		<views:LanguageSelector id="langSelector" 
				visible="false" 
				height="20"
				width="180"
				accessibilityName="{ResourceUtil.getInstance().getString('bbb.mainToolbar.langSelector')}"
				styleName="languageSelectorStyle"/>
		<mx:Button
				width="20"
				height="20"
				visible="{layoutOptions.showLogButton}"
				includeInLayout="{layoutOptions.showLogButton}"
				toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.logBtn.toolTip')}"
				id="logBtn"
				icon="{logs_icon}"
				click="openLogWindow()"/>
		<mx:HBox id="addedBtns" />
	</mx:ControlBar>
</mx:VBox>
