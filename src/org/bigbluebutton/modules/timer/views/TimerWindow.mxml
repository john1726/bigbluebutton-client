<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mdi:CustomMdiWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mdi="org.bigbluebutton.common.*" 
	xmlns:flc="flexlib.controls.*"
	implements="org.bigbluebutton.common.IBbbModuleWindow" 
	xmlns:mate="http://mate.asfusion.com/"
	creationComplete="onCreationComplete()"
	title="{ResourceUtil.getInstance().getString('bbb.timer.title')}"
	showCloseButton="false">

	<mate:Listener type="{StartTimerEvent.START_TIMER}" method="handleStartTimer" />
	<mate:Listener type="{StopTimerEvent.STOP_TIMER}" method="handleStopTimer" />

	<mx:Script>
		<![CDATA[
                        import com.hurlant.crypto.symmetric.AESKey;
                        import com.hurlant.crypto.symmetric.DESKey;
                        import com.hurlant.util.Hex;
                        import com.hurlant.crypto.symmetric.IPad;
                        import com.hurlant.crypto.symmetric.ICipher;
                        import com.hurlant.crypto.symmetric.IVMode;
                        import com.hurlant.crypto.symmetric.NullPad;
                        import com.hurlant.crypto.Crypto;
                        import com.hurlant.util.Base64;

                        import flash.utils.ByteArray; 
                        import flash.events.TimerEvent;
                        import flash.utils.Timer;
	                import flash.utils.getTimer;

			import com.asfusion.mate.events.Dispatcher;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.model.timer.events.StartTimerEvent;
			import org.bigbluebutton.main.model.timer.events.StopTimerEvent;
			import org.bigbluebutton.core.events.LockControlEvent;
			import org.bigbluebutton.core.events.VoiceConfEvent;
			import org.bigbluebutton.core.vo.LockSettingsVO;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(TimerWindow);      

			private var dispatcher:Dispatcher;

                        private const TIMER_INTERVAL:int = 50;
                        private var timerAtStart:Number = 0;
                        private var timerAtPause:Number = 0;
                        private var t:Timer;
                        private var d:Date;

                        [Bindable] private var sec:int = 0;
                        [Bindable] private var hrs:int = 0;
                        [Bindable] private var min:int = 0;
                        [Bindable] private var mls:int = 0;
			
			private function onCreationComplete():void {
				dispatcher = new Dispatcher();

                                t = new Timer(TIMER_INTERVAL);
                                t.addEventListener(TimerEvent.TIMER, updateTimer);
                            LOGGER.debug("TimerWindows.mxml: test message");
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.TOP_LEFT;
			}

			private function handleStartTimer(e:StartTimerEvent):void {
                            startTimer();
			}

			private function handleStopTimer(e:StopTimerEvent):void {
                            stopTimer();
			}

                        private function updateTimer(evt:TimerEvent):void {
                            d = new Date( getTimer() - timerAtStart + timerAtPause);
                            hrs = d.hours;
                            min = d.minutes;
                            sec = d.seconds;
                            mls = d.milliseconds;

                            var dateFormatter = new DateFormatter();
                            dateFormatter.formatString = 'HH:NN:SS';

                            counter.text = dateFormatter.format(d);
                        }

                        private function startPauseTimer(event:MouseEvent):void {
                            if ( event.target.label == "Start" ) {
                                event.target.label = "Pause";
                                timerAtStart = getTimer();
                                t.start();
                            } else {
                                event.target.label = "Start";
                                timerAtPause = hrs * 3600000 + min * 60000 + sec * 1000 + mls;
                                t.stop();
                            }
                        }

                        private function startTimer():void {
                            t.start();
                        }

                        private function stopTimer():void {
                            t.stop();
                            timerAtPause = hrs * 3600000 + min * 60000 + sec * 1000 + mls;

                            var encryptedSession = encrypt("TuberEdu");
                            var encryptedTime = encrypt(timerAtPause.toString());
                            
                            // http://tuberedu.com/tuberapi/tubertutoring?tuberroomrd=xxxxxxxxxx&tubertime=xx
                            var url:String = new String("http://tuberedu.com/tuberapi/tubertutoring?tuberroomrd=");
                            url += encryptedSession;
                            url += "&tubertime=";
                            url += encryptedTime;
                            LOGGER.debug("stopTimer url: " + url);
                            navigateToURL(new URLRequest(url), "_self");

                            timerAtPause = 0;
                            timerAtStart = 0;
                            hrs = 0;
                            min = 0;
                            sec = 0;
                            mls = 0;
                        }

                        //notice that decrKey and decrIV length must be 16 chars long! ex: 1234567890123456
                        private function encrypt(input:String):String
                        {
                            var decrKey:String = new String("tuber$2016");
                            // byte[] iv = { 20, 52, 88, 120, 76, 89, 205, 239 };
                            var iv:ByteArray = new ByteArray();
                            iv.writeUnsignedInt(20);
                            iv.writeUnsignedInt(52);
                            iv.writeUnsignedInt(88);
                            iv.writeUnsignedInt(120);
                            iv.writeUnsignedInt(76);
                            iv.writeUnsignedInt(89);
                            iv.writeUnsignedInt(205);
                            iv.writeUnsignedInt(239);

                            var decrIV:String = iv.readUTF();
                            var inputBA:ByteArray=Hex.toArray(Hex.fromString(input));        
                            var key:ByteArray = Hex.toArray(Hex.fromString(decrKey));                
                            var pad:IPad = new NullPad();
                            var aes:ICipher = Crypto.getCipher("des-cbc", key, pad);
                            var ivmode:IVMode = aes as IVMode;
                            ivmode.IV = Hex.toArray(Hex.fromString(decrIV));            
                            aes.encrypt(inputBA);  

                            return Base64.encodeByteArray( inputBA);
                         }

        ]]>
	</mx:Script>
    <mx:DateFormatter id="dateFormatter" formatString="HH:NN:SS" />

    <mx:ApplicationControlBar dock="true">
        <mx:Button id="btnStart" label="Start" click="startPauseTimer(event)" />
        <mx:Button id="btnStop" label="Stop" click="stopTimer()" />
    </mx:ApplicationControlBar>

    <mx:Label id="counter" text="{hrs + ' : ' + min + ' : ' + sec}" fontSize="48" />
</mdi:CustomMdiWindow>
