<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml"
	implements="org.bigbluebutton.common.IBigBlueButtonModule"
	creationComplete="onCreationComplete()" xmlns:maps="org.bigbluebutton.modules.timer.maps.*" >
	
	<maps:TimerEventMap id="TimerEventMap" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBigBlueButtonModule;
			import org.bigbluebutton.modules.timer.events.StartTimerModuleEvent;
			import org.bigbluebutton.modules.timer.events.StopTimerModuleEvent;

			private static const LOGGER:ILogger = getClassLogger(TimerModule);

			private var _moduleName:String = "Timer Module";
			private var _attributes:Object;
			private var dispatcher:Dispatcher;
			
			private function onCreationComplete():void {
				LOGGER.debug("TimerModule Initialized");		
			}
			
			public function get moduleName():String {
				return _moduleName;
			}
			
			public function get uri():String {
				if (_attributes.mode == "PLAYBACK") {										
					return _attributes.uri + "/" + _attributes.playbackRoom;
				} 
				
				return _attributes.uri + "/" + _attributes.room;
			}
			
                        public function start(attributes:Object):void {         
				dispatcher = new Dispatcher();
				var startEvent:StartTimerModuleEvent = new StartTimerModuleEvent(StartTimerModuleEvent.START_TIMER_MODULE);
				startEvent.module = this;
				dispatcher.dispatchEvent(startEvent);
			}
			
			public function stop():void {
				LOGGER.debug("TimerModule is stopping");
				
				var endEvent:StopTimerModuleEvent = new StopTimerModuleEvent(StopTimerModuleEvent.STOP_TIMER_MODULE);
				dispatcher.dispatchEvent(endEvent);
				
			}
		]]>
	</mx:Script>

</mx:Module>
