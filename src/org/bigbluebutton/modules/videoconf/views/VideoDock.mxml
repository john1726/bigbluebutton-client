<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<CustomMdiWindow xmlns="org.bigbluebutton.common.*"
		xmlns:mx="http://www.adobe.com/2006/mxml"
		horizontalScrollPolicy="off"
		verticalScrollPolicy="off"
		implements="org.bigbluebutton.common.IBbbModuleWindow"
		xmlns:mate="http://mate.asfusion.com/" styleNameFocus="videoDockStyleFocus"
		layout="absolute" visible="true" styleNameNoFocus="videoDockStyleNoFocus"
		showCloseButton="false"
		horizontalAlign="center"
		verticalAlign="middle"
		creationComplete="onCreationComplete()">
	
	<mate:Listener type="{ShortcutEvent.FOCUS_VIDEO_WINDOW}" method="focusWindow" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.core.UIComponent;
			
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.videoconf.model.VideoConfOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private var videoOptions:VideoConfOptions = new VideoConfOptions();
			private var keyCombos:Object;
			private var disp:Dispatcher = new Dispatcher();
			
			private function onCreationComplete():void {
				hotkeyCapture();
				titleBarOverlay.tabIndex = videoOptions.baseTabIndex;
				
				minimizeBtn.tabIndex = videoOptions.baseTabIndex+1;
				maximizeRestoreBtn.tabIndex = videoOptions.baseTabIndex+2;
				closeBtn.tabIndex = videoOptions.baseTabIndex+3;
				
				resourcesChanged(); // update the window controls once they've been created
			}
			
			public function getPrefferedPosition():String {
				return MainCanvas.BOTTOM_LEFT;
			}
			
			private function hotkeyCapture():void {
				this.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
				ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
			}
			
			// Handle general-access hotkeys, regardless of what window the user is focused in
			private function handleKeyDown(e:KeyboardEvent) :void {
				var modifier:String = ExternalInterface.call("determineModifier");
				loadKeyCombos(modifier);
				var keyPress:String = (e.ctrlKey  ? "control+" : "") + (e.shiftKey ? "shift+"   : "") +
					(e.altKey   ? "alt+"     : "") + e.keyCode;
				if (keyCombos[keyPress]) {
					disp.dispatchEvent(new ShortcutEvent(keyCombos[keyPress]));
				}
			}
			
			private function loadKeyCombos(modifier:String):void {
				keyCombos = new Object(); // always start with a fresh array
				
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.general.maximize') as String)] = ShortcutEvent.MAXIMIZE_CHAT;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.general.minimize') as String)] = ShortcutEvent.MINIMIZE_CHAT;
			}
			
			override protected function resourcesChanged():void {
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString("bbb.videodock.title");
				
				if (titleBarOverlay != null) {
					titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.videoDock.titleBar');
				}
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.video.minimizeBtn.accessibilityName");
					
					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.video.maximizeRestoreBtn.accessibilityName");
					
					closeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.video.closeBtn.accessibilityName");
				}
			}
			
			private function localeChanged(e:Event):void {
				resourcesChanged();
			}
			
			private function focusWindow(e:ShortcutEvent):void {
				focusManager.setFocus(titleBarOverlay);
			}
			
			private function remoteMinimize(e:ShortcutEvent):void {
				if (!minimized) {
					this.minimize();
				}
			}
			
			private function remoteMaximize(e:ShortcutEvent):void {
				if (!maximized && !minimized) {
					this.maximize();
				} else {
					this.restore();
				}
			}
			
			override protected function hideAllChildren():void {
				for each (var child:DisplayObject in getChildren()) {
					if (child is UIComponent) {
						(child as UIComponent).includeInLayout = false;
					}
				}
			}
			
			override protected function showAllChildren():void {
				for each (var child:DisplayObject in getChildren()) {
					if (child is UIComponent) {
						(child as UIComponent).includeInLayout = false;
					}
				}
			}
		]]>
	</mx:Script>
</CustomMdiWindow>