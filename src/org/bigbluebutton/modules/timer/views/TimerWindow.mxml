<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mdi:CustomMdiWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mdi="org.bigbluebutton.common.*" 
	xmlns:flc="flexlib.controls.*"
	implements="org.bigbluebutton.common.IBbbModuleWindow" 
	xmlns:mate="http://mate.asfusion.com/"
	creationComplete="onCreationComplete()"
	title="{ResourceUtil.getInstance().getString('bbb.timer.title')}"
	showCloseButton="false">

	<mate:Listener type="{StartTimerEvent.START_TIMER}" method="handleStartTimer" />
	<mate:Listener type="{StopTimerEvent.STOP_TIMER}" method="handleStopTimer" />

	<mx:Script>
		<![CDATA[ 
                        import com.hurlant.crypto.symmetric.AESKey;
                        import com.hurlant.crypto.symmetric.DESKey;
                        import com.hurlant.util.Hex;
                        import com.hurlant.crypto.symmetric.IPad;
                        import com.hurlant.crypto.symmetric.ICipher;
                        import com.hurlant.crypto.symmetric.IVMode;
                        import com.hurlant.crypto.symmetric.NullPad;
                        import com.hurlant.crypto.Crypto;
                        import com.hurlant.util.Base64;

                        import flash.utils.ByteArray; 
                        import flash.events.TimerEvent;
                        import flash.utils.Timer;
	                import flash.utils.getTimer;
                        import flash.globalization.LocaleID;
                        import flash.globalization.DateTimeFormatter;

			import com.asfusion.mate.events.Dispatcher;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			
	                import org.bigbluebutton.main.api.JSLog;
                        import org.as3commons.logging.util.jsonXify;
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.model.timer.events.StartTimerEvent;
			import org.bigbluebutton.main.model.timer.events.StopTimerEvent;
			import org.bigbluebutton.core.events.LockControlEvent;
			import org.bigbluebutton.core.events.VoiceConfEvent;
			import org.bigbluebutton.core.vo.LockSettingsVO;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(TimerWindow);      

			private var dispatcher:Dispatcher;

                        private const TIMER_INTERVAL:int = 1000;
                        private var stopwatch:Timer;
                        private var d:Date;

                        // Time stamps
		        private var pauseTime:Number = 0;
		        private var pauseLength:Number = 0;
		        private var buttonPressTime:Number = 0;
		
                        // Flag
		        private var timing:Boolean = false;

                        [Bindable] private var hours:int = 0;
                        [Bindable] private var seconds:int = 0;
                        [Bindable] private var minutes:int = 0;
                        [Bindable] private var milli:int = 0;
			
			private function onCreationComplete():void {
		            dispatcher = new Dispatcher();

                            stopwatch = new Timer(TIMER_INTERVAL);
                            stopwatch.addEventListener(TimerEvent.TIMER, updateTimer);

                            var logData:Object = new Object();       
                            JSLog.debug("TimerWindows.mxml: test message", logData);
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.TOP_LEFT;
			}

			private function handleStartTimer(e:StartTimerEvent):void {
                            startTimer();
			}

			private function handleStopTimer(e:StopTimerEvent):void {
                            stopTimer();
			}

                        private function updateTimer(evt:TimerEvent):void {
			    var totalTime:Number = (getTimer()/1000)-pauseLength;
			    var goTime:Number = totalTime-buttonPressTime;
			
		            if( timing ) 
			    {
				// Calculate time
				hours = Math.floor(goTime/3600);
				minutes = Math.floor((goTime/3600-hours)*60);
				seconds = Math.floor(((goTime/3600-hours)*60-minutes)*60);
				milli = Math.floor((goTime-(seconds+(minutes*60)+(hours*3600)))*100);				
			    }

                        }

                        private function startPauseTimer(event:MouseEvent):void {
                            var logData:Object = new Object();       
                            if ( event.target.label == "Start" ) {
                                event.target.label = "Pause";
				pause(false);
                                stopwatch.start();
                            } else {
                                event.target.label = "Start";
				pause(true);
                                stopwatch.stop();
                            }
                        }

                        private function startTimer():void {
                            var logData:Object = new Object();       
                            JSLog.debug("startTimer()", logData);
                            stopwatch.start();
                        }

                        public function pause(b:Boolean):void
		        {
                            var logData:Object = new Object();       
			    if( b ){
				pauseTime = getTimer()/1000;
                                JSLog.debug("pause(): pauseTime: " + pauseTime, logData);
			    }else{
				pauseLength = ((getTimer()/1000)-pauseTime)+pauseLength;
                                JSLog.debug("pause(): pauseLength: " + pauseLength, logData);
			    }
			    timing = !b;
		        }

                        private function stopTimer():void {
                            var logData:Object = new Object();       

                            stopwatch.stop();
			    buttonPressTime = (getTimer()/1000)-pauseLength;
                            JSLog.debug("stopTimer(): buttonPressTime: " + buttonPressTime, logData);
                            JSLog.debug("stopTimer(): hours: " + hours, logData);
                            JSLog.debug("stopTimer(): minutes: " + minutes, logData);
                            JSLog.debug("stopTimer(): seconds: " + seconds, logData);
                            JSLog.debug("stopTimer(): milli: " + milli, logData);
			    pause(true);

                            var encryptedSession = encrypt("TuberEdu");
                            var encryptedTime = encrypt(buttonPressTime.toString());
                            
                            // http://tuberedu.com/tuberapi/tubertutoring?tuberroomrd=xxxxxxxxxx&tubertime=xx
                            var url:String = new String("http://tuberedu.com/tuberapi/tubertutoring?tuberroomid=");
                            url += encryptedSession;
                            url += "&tubertime=";
                            url += encryptedTime;

                            JSLog.info("stopTimer() url: " + url, logData);
                            navigateToURL(new URLRequest(url), "_self");
                            JSLog.info("stopTimer(): navigating to url", logData);
                            hours = 0;
                            minutes = 0;
                            seconds = 0;
                            milli = 0;
                        }

                        //notice that decrKey and decrIV length must be 16 chars long! ex: 1234567890123456
                        private function encrypt(input:String):String
                        {
                            var logData:Object = new Object();       
                            JSLog.debug("encrypt()", logData);
                            JSLog.debug("encrypt() input string: " + input, logData);

                            var decrKey:String = new String("tuber$2016abcdef");
                            // byte[] iv = { 20, 52, 88, 20, 76, 89, 25, 39 };
                            var iv:ByteArray = new ByteArray();
                            iv.writeByte(2);
                            iv.writeByte(0);
                            iv.writeByte(5);
                            iv.writeByte(2);
                            iv.writeByte(8);
                            iv.writeByte(8);
                            iv.writeByte(2);
                            iv.writeByte(0);
                            iv.writeByte(7);
                            iv.writeByte(6);
                            iv.writeByte(8);
                            iv.writeByte(9);
                            iv.writeByte(2);
                            iv.writeByte(5);
                            iv.writeByte(3);
                            iv.writeByte(9);

                            JSLog.debug("encrypt(): A", logData);
                            JSLog.debug("encrypt(): iv: " + iv.toString(), logData);

                            var decrIV:String = iv.readUTF();
                            JSLog.debug("encrypt(): B", logData);
                            var inputBA:ByteArray=Hex.toArray(Hex.fromString(input));        
                            JSLog.debug("encrypt(): C", logData);
                            var key:ByteArray = Hex.toArray(Hex.fromString(decrKey));                
                            JSLog.debug("encrypt(): D", logData);
                            var pad:IPad = new NullPad();
                            JSLog.debug("encrypt(): E", logData);
                            var aes:ICipher = Crypto.getCipher("aes-cbc", key, pad);
                            JSLog.debug("encrypt(): F", logData);
                            var ivmode:IVMode = aes as IVMode;
                            JSLog.debug("encrypt(): G", logData);
                            ivmode.IV = Hex.toArray(Hex.fromString(decrIV));   
                            JSLog.debug("encrypt(): H", logData);
                            aes.encrypt(inputBA);  
                            JSLog.debug("encrypt(): I", logData);

                            JSLog.debug("encrypt(): end", logData);

                            return Base64.encodeByteArray( inputBA);
                         }

        ]]>
	</mx:Script>
    <mx:DateFormatter id="dateFormatter" formatString="HH:NN:SS" />

    <mx:ApplicationControlBar dock="true">
        <mx:Button id="btnStart" label="Start" click="startPauseTimer(event)" />
        <mx:Button id="btnStop" label="Stop" click="stopTimer()" />
    </mx:ApplicationControlBar>

    <mx:Label id="counter" text="{hours + ' : ' + minutes + ' : ' + seconds}" fontSize="48" />
</mdi:CustomMdiWindow>
