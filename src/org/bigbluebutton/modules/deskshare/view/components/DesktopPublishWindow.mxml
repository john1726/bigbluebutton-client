<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<dspub:CustomMdiWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:dspub="org.bigbluebutton.common.*"
	backgroundColor="#C0C0C0"
	initialize="init()"
	creationComplete="onCreationComplete()"	
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	width="365" height="350"
	title="{ResourceUtil.getInstance().getString('bbb.desktopPublish.title')}"
	resizable="false">
	
	<mate:Listener type="{AppletStartedEvent.APPLET_STARTED}" method="onAppletStart" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="onChangedPresenter" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="onChangedPresenter" />	
	<mate:Listener type="{CursorEvent.UPDATE_CURSOR_LOC_EVENT}" method="onUpdateCursorEvent" />
	<mate:Listener type="{ViewStreamEvent.STOP}" method="closePublishWindow" />
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
	<mate:Listener type="{StopSharingButtonEvent.STOP_SHARING}" method="stopSharingEvent" />
	<mate:Listener type="{DeskshareAppletLaunchedEvent.APPLET_LAUNCHED}" method="handleDeskshareAppletLaunchedEvent" />
	<mate:Listener type="{ShortcutEvent.REMOTE_FOCUS_DESKTOP}" method="remoteFocus" />
	
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.core.UIComponent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.deskshare.events.AppletStartedEvent;
			import org.bigbluebutton.modules.deskshare.events.CursorEvent;
			import org.bigbluebutton.modules.deskshare.events.DeskshareAppletLaunchedEvent;
			import org.bigbluebutton.modules.deskshare.events.ShareWindowEvent;
			import org.bigbluebutton.modules.deskshare.events.StopSharingButtonEvent;
			import org.bigbluebutton.modules.deskshare.events.StreamEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewStreamEvent;
			import org.bigbluebutton.modules.deskshare.model.DeskshareOptions;
			import org.bigbluebutton.modules.deskshare.utils.JavaCheck;
			import org.bigbluebutton.modules.deskshare.utils.BrowserCheck;
			
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private static const LOGGER:ILogger = getClassLogger(DesktopPublishWindow);      

			public static const SCALE:Number = 5;
			private static const VID_HEIGHT_PAD:Number = 73;
			private static const VID_WIDTH_PAD:Number = 6;
			
			private var images:Images = new Images();
			[Bindable] public var bbbLogo:Class = images.bbb_logo;
			[Bindable] private var cursorIcon:Class = images.cursorIcon;
			
			private var connection:NetConnection;
			private var uri:String;
			private var useTLS:Boolean;
			private var room:String;
			private var sharingFullScreen:Boolean = false;
			private var streaming:Boolean = false;
			
			private var video:Video;
			private var ns:NetStream;
			[Bindable] private var videoHolder:UIComponent;
			private var stream:String;
			private var videoHeight:Number;
			private var videoWidth:Number;
			private var captureHeight:Number = Capabilities.screenResolutionY;
			private var captureWidth:Number = Capabilities.screenResolutionX;
			private var autoStart:Boolean = false;
			private var globalDispatcher:Dispatcher = new Dispatcher();
			private var javaTimer:Timer;
			
			[Bindable] private var cursor:Sprite;
			[Bindable] private var dsOptions:DeskshareOptions;
			
      private var calledStopApplet:Boolean = false;
      
			private function init():void {
				dsOptions = new DeskshareOptions();
			}
			
			private function onCreationComplete():void {
				windowControls.maximizeRestoreBtn.enabled = false;
				
				cursor = new Sprite();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);		
				
				if (BrowserCheck.isUsingLessThanChrome38OnMac()) {
					setCurrentState("chromeOnMacWarningState");
				} else if (BrowserCheck.isUsingEdgePluginUnsupported()) {
					setCurrentState("edgePluginWarningState");
				} else {
					var javaIssue:String = JavaCheck.checkJava();
					
					if (javaIssue != null) {
						if (BrowserCheck.isChrome42OrHigher()) {
							setCurrentState("chrome42WarningState");
						} else {
							setCurrentState("javaIssueWarningState");
							javaIssueWarningStateLbl.htmlText = javaIssue;
						}
					} else {
						setCurrentState("dispFullRegionControlBar");
					}
				}
				resourcesChanged();
				
				titleBarOverlay.tabIndex = dsOptions.baseTabIndex;
				titleBarOverlay.focusEnabled = true;
			}
			
			private function remoteFocus(e:ShortcutEvent):void{
				focusManager.setFocus(minimizeBtn);
			}
			
			public function get defaultWidth():int{
				return this.width;
			}
			
			public function get defaultHeight():int{
				return this.height;
			}
			
			public function set defaultHeight(height:int):void{
				this.height = height;
			}
			
			public function set defaultWidth(width:int):void{
				this.width = width;
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_PUBLISH;
			}

			/*
			 * Implement resizeable interface.
			 */			
			public function resetWidthAndHeight():void{/* do nothing */}
			
			public function initWindow(connection:NetConnection, uri:String, useTLS:Boolean , room:String, autoStart:Boolean, autoFullScreen:Boolean):void {
				this.connection = connection;
				this.uri = uri;
				this.useTLS = useTLS;
				this.room = room;				
				this.autoStart = autoStart;
				/*if(autoFullScreen)
					shareScreen(true);*/		
			}
			
			public function shareScreen(fullScreen:Boolean):void {
				LOGGER.debug("Calling shareScreen");
				btnFSPublish.enabled = false;
				btnRegionPublish.enabled = false;
//				useSVC2Check.enabled = false;
				javaTimer = new Timer(7000, 1);
				javaTimer.addEventListener(TimerEvent.TIMER, onJavaTimer);
				javaTimer.start();
				startSharing(connection, uri, useTLS , room, fullScreen);
			}
			
			private function startSharing(connection:NetConnection, uri:String , useTLS:Boolean , room:String, fullScreen:Boolean):void {
				var captureX:Number = 0;
				var captureY:Number = 0;				
				sharingFullScreen = fullScreen;
				LOGGER.debug("Calling startApplet");
				ExternalInterface.call("startApplet", uri , useTLS , room, fullScreen, true /*useSVC2Check.selected*/);
			}
			
			public function stopSharing():void{
				if (streaming) {
					stopStream();
					var streamEvent:StreamEvent = new StreamEvent(StreamEvent.STOP);
					dispatchEvent(streamEvent);					
				}
				sharingFullScreen = false;
				streaming = false;
									
				closeWindow();
			}

			public function stopSharingEvent(evt:StopSharingButtonEvent):void{
				if (streaming) {
					stopStream();
					var streamEvent:StreamEvent = new StreamEvent(StreamEvent.STOP);
					dispatchEvent(streamEvent);					
				}
				sharingFullScreen = false;
				streaming = false;
									
				closeWindow();
			}
			
			private function onJavaTimer(e:TimerEvent):void {
				var browser:Array = ExternalInterface.call("determineBrowser");
				if (browser[0] == "Chrome")
					javaHelpArea.visible = javaHelpArea.includeInLayout = true;
			}
			
			private function onUpdateCursorEvent(event:CursorEvent):void {	
				// DO NOT compute the x and y coordinate and assign directly to the cursorImg
                // as it results in a flickering and jerky mouse pointer (ralam jun 10, 2010).
				cursor.x = video.x + ((event.x/captureWidth)) * video.width;
				cursor.y = video.y + ((event.y/captureHeight)) * video.height;
				cursorImg.visible = true;

				// Do not display cursor if they are outside the capture area.
                if (cursor.x < video.x) cursor.x = video.x;
                if (cursor.y < video.y) cursor.y = video.y;
                if (cursor.x > video.x + video.width) cursor.x = video.x + video.width;
                if (cursor.y > video.y + video.height) cursor.y = video.y + video.height;
                cursorImg.x =  cursor.x;
                cursorImg.y = cursor.y;
			}
			
			private function onAppletStart(event:AppletStartedEvent):void{
				if (!connection.connected) return;
				
				LOGGER.debug("DeskShareWindow::onAppletStart");
				startPreviewStream(connection, room, event.videoWidth, event.videoHeight);
				var streamEvent:StreamEvent = new StreamEvent(StreamEvent.START);
				streamEvent.videoWidth = event.videoWidth;
				streamEvent.videoHeight = event.videoHeight;
				dispatchEvent(streamEvent);
			}
			
			private function startPreviewStream(nc:NetConnection, streamName:String, capWidth:Number, capHeight:Number):void{				
				streaming = true;
				
				// Store capture dimensions so we can position cursor properly.
				captureWidth = capWidth;
				captureHeight = capHeight;
				
				videoHolder = new UIComponent();
				
				var vidW:Number = captureWidth;
				var vidH:Number = captureHeight;
				
				// Don't scale if capture dimension is smaller than window.
				if((captureWidth > this.width - VID_WIDTH_PAD) && (captureHeight < this.height - VID_HEIGHT_PAD)){
					vidW = this.width - VID_WIDTH_PAD;
					vidH = (captureHeight / captureWidth) * vidW;
				}
				else if( ((captureWidth < this.width - VID_WIDTH_PAD) && (captureHeight > this.height - VID_HEIGHT_PAD)) 
				|| ((captureWidth > this.width - VID_WIDTH_PAD) && (captureHeight > this.height - VID_HEIGHT_PAD)) ){
					vidH = this.height - VID_HEIGHT_PAD;
					vidW = (captureWidth / captureHeight) * vidH;
				}
				else{
					vidW = captureWidth;
					vidH = captureHeight;
				}

				LOGGER.debug("deskshare preview[{0},{1}][{2},{3}]", [captureWidth, captureHeight, vidW, vidH]);
				video = new Video(vidW, vidH);
				video.width = vidW;
				video.height = vidH;
				videoHolder.width = vidW;
				videoHolder.height = vidH;
				video.x = videoHolder.x = (this.width - VID_WIDTH_PAD - vidW) / 2;
				video.y = videoHolder.y = (this.height - VID_HEIGHT_PAD - vidH) / 2;

				
				videoHolder.addChild(video);
				videoHolder.addChild(cursor);
				videoHolder.addChild(cursorImg);
				cursor.visible = false;
				this.addChild(videoHolder);
											
				ns = new NetStream(nc);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				video.attachNetStream(ns);
				ns.play(streamName);
				
				btnClosePublish.enabled = true;
				btnFSPublish.enabled = false;				
				btnRegionPublish.enabled = false;
			}
			
			private function stopStream():void{
				streaming = false;
				captureHeight = Capabilities.screenResolutionY;
				captureWidth = Capabilities.screenResolutionX;
				ns.close();
			}
			
			private function onAsyncError(e:AsyncErrorEvent):void{
				LOGGER.debug("VIdeoWindow::asyncerror {0}", [e.toString()]);
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
				switch(e.info.code){
				case "NetStream.Publish.Start":
					LOGGER.debug("NetStream.Publish.Start for broadcast stream {0}", [stream]);
					break;
				case "NetStream.Play.UnpublishNotify":
					LOGGER.debug("NetStream.Play.UnpublishNotify for broadcast stream {0}", [stream]);
					stopSharing();
					break;
				case "NetStream.Play.Start":
					LOGGER.debug("Netstatus: {0}", [e.info.code]);
					globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.DESKSHARE_STARTED));
				}
			}
			
			private function onChangedPresenter(e:Event):void{
				stopSharing();
				closeWindow();
			}

      private function callStopApplet():void {
        if (!calledStopApplet) {
          calledStopApplet = true;
          LOGGER.debug("Calling stopApplet in callStopApplet()");
          ExternalInterface.call("stopApplet");
        }
      }
      private function closeWindow():void {		
		LOGGER.debug("Calling stopApplet in closeWindow()");
        callStopApplet();
        dispatchEvent(new ShareWindowEvent(ShareWindowEvent.CLOSE));				
      }		
      
      private function restartJava():void {
		LOGGER.debug("Calling stopApplet in restartJava()");
        callStopApplet();
        shareScreen(sharingFullScreen);
      }
			
			private function handleDeskshareAppletLaunchedEvent(e:DeskshareAppletLaunchedEvent):void {
				if (javaTimer && javaTimer.running) {
					javaTimer.stop();
				}
				javaHelpArea.visible = javaHelpArea.includeInLayout = false;
			}
			
			/*
			 * Override the close handler. We want the Event Map to send a message to
			 * the MDIManager to close this window;
			 */
			override public function close(event:MouseEvent = null):void {
				stopSharing();
				closeWindow();
			}		
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.desktopPublish.title');
				
				if (titleBarOverlay != null) {
					titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.desktopPublish.title');
				}
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString('bbb.desktopPublish.minimizeBtn.toolTip');
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.desktopPublish.minimizeBtn.accessibilityName");

					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString('bbb.desktopPublish.maximizeRestoreBtn.toolTip');
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.desktopPublish.maximizeRestoreBtn.accessibilityName");

					closeBtn.toolTip = ResourceUtil.getInstance().getString('bbb.desktopPublish.closeBtn.toolTip');
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.desktopPublish.closeBtn.accessibilityName");
				}
			}
			
			private function localeChanged(e:Event):void{
				resourcesChanged();
			}
			
			private function closePublishWindow(event:ViewStreamEvent):void{
				stopStream();
				closeWindow();
			}
		]]>
	</mx:Script>

	<dspub:TabIndexer startIndex="{dsOptions.baseTabIndex + 1}"
					  tabIndices="{[minimizeBtn, maximizeRestoreBtn, closeBtn, btnFSPublish, btnClosePublish, btnRegionPublish]}"/>

	<!--http://stackoverflow.com/questions/369120/why-does-mxstates-have-trouble-being-resolved-to-a-component-implementation-->
	<mx:VBox id="javaHelpArea" includeInLayout="false" visible="false" height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
		<mx:Text width="80%" textAlign="center" styleName="desktopShareTextStyle" text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chromeHint.title')}" />
		<mx:Image id="javaHelpImg" styleName="chromeJavaHelpImage" source="{javaHelpImg.getStyle('imageSource')}" />
		<mx:Text width="80%" textAlign="center" styleName="desktopShareTextStyle" text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chromeHint.message')}" />
		<mx:Button label="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chromeHint.button')}" click="restartJava()"/>
	</mx:VBox>
	<dspub:states>	    
        <mx:State name="dispFullRegionControlBar">   
            <mx:AddChild>
              <mx:ControlBar id="fullRegionBottomBar">
                <mx:VBox width="100%" height="100%" horizontalAlign="center">
                  <mx:HBox horizontalAlign="center">
                    <mx:Button id="btnFSPublish" 
                               toolTip="{ResourceUtil.getInstance().getString('bbb.desktopPublish.fullscreen.tooltip')}" 
                               label="{ResourceUtil.getInstance().getString('bbb.desktopPublish.fullscreen.label')}" 
                               visible="true" 
                               click="shareScreen(true)" />
                    <mx:Spacer width="100%"/>
                    <mx:Button id="btnClosePublish" 
                               toolTip="{ResourceUtil.getInstance().getString('bbb.desktopPublish.stop.tooltip')}" 
                               label="{ResourceUtil.getInstance().getString('bbb.desktopPublish.stop.label')}" 
                               visible="true" 
                               enabled="false" 
                               click="stopSharing()" />
                    <mx:Spacer width="100%"/>
                    <mx:Button id="btnRegionPublish"
                               toolTip="{ResourceUtil.getInstance().getString('bbb.desktopPublish.region.tooltip')}" 
                               label="{ResourceUtil.getInstance().getString('bbb.desktopPublish.region.label')}" 
                               visible="true" 
                               click="shareScreen(false)" 
                               focusEnabled="false"
                               tabEnabled="false"/>
                    <mx:Spacer width="100%"/>                      
                  </mx:HBox>
                </mx:VBox>
              </mx:ControlBar>
            </mx:AddChild>
        </mx:State>	
		<mx:State name="chromeOnMacWarningState">
			<mx:AddChild>
				<mx:VBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Text id="chromeOnMacWarningLbl" width="80%" textAlign="center" styleName="desktopShareTextStyle"
							 text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chromeOnMacUnsupportedHint')}" />
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="chrome42WarningState">
			<mx:AddChild>
				<mx:VBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Text id="chrome42WarningLbl" width="80%" textAlign="center" styleName="desktopShareTextStyle"
							 text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chrome42UnsupportedHint')}" />
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="edgePluginWarningState">
			<mx:AddChild>
				<mx:VBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Text id="edgePluginWarningLbl" width="80%" textAlign="center" styleName="desktopShareTextStyle"
							 text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.edgePluginUnsupportedHint')}" />
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="javaIssueWarningState">
			<mx:AddChild>
				<mx:VBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Text id="javaIssueWarningStateLbl" width="80%" textAlign="center" styleName="desktopShareTextStyle" />
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
	</dspub:states>
	<mx:Image id="cursorImg" visible="false" source="@Embed('../../assets/images/cursor4.png')"/>

</dspub:CustomMdiWindow>
